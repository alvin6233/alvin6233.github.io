<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>alvin&#39;s blog</title>
  
  <subtitle>Good memory is worse than bad writing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dongz.me/"/>
  <updated>2019-02-27T16:34:08.867Z</updated>
  <id>https://dongz.me/</id>
  
  <author>
    <name>alvin dong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库语言知多少</title>
    <link href="https://dongz.me/2019/02/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
    <id>https://dongz.me/2019/02/28/数据库语言知多少/</id>
    <published>2019-02-27T16:29:00.000Z</published>
    <updated>2019-02-27T16:34:08.867Z</updated>
    
    <content type="html"><![CDATA[<p>DQL、DML、DDL、DCL、TCL、DAL这些数据库语言，在平时可能经常会碰到。但是真要说出个一二三来，也许只能只言片语的回答出几句。废话少说，请看正文一起了解一下。</p><a id="more"></a><h2 id="数据库语言"><a href="#数据库语言" class="headerlink" title="数据库语言"></a>数据库语言</h2><blockquote><p>DQL</p></blockquote><p>英文全称（Data Query Language），即数据查询语言。  </p><p>基本结构：由SELECT子句，FROM子句，WHERE子句组成的查询块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;字段名表&gt;</span><br><span class="line">FROM &lt;表或视图名&gt;</span><br><span class="line">WHERE &lt;查询条件&gt;</span><br></pre></td></tr></table></figure><blockquote><p>DML</p></blockquote><p>英文全称（Data Manipulation Language），即数据操纵语言。</p><p>基本结构：三种核心指令INSERT（插入）、UPDATE（修改）、DELETE（删除），需要commit或rollback显式提交事务。</p><blockquote><p>DDL</p></blockquote><p>英文全称（Data Definition Language），即数据定义语言。  </p><p>基本结构：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE（创建数据库）</span><br><span class="line"></span><br><span class="line">CREATE TABLE（创建数据库表格）</span><br><span class="line"></span><br><span class="line">ALTER TABLE（修改数据库表格）</span><br><span class="line"></span><br><span class="line">DROP TABLE（删除数据库表格）</span><br><span class="line"></span><br><span class="line">CREATE VIEW（创建查询命令）</span><br><span class="line"></span><br><span class="line">ALTER VIEW（修改查询命令）</span><br><span class="line"></span><br><span class="line">DROP VIEW（删除查询命令）</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE（删除数据表内容）</span><br></pre></td></tr></table></figure><blockquote><p>DCL</p></blockquote><p>英文全称（数据控制语言），即数据控制语言。  </p><p>基本结构：用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT：授权</span><br><span class="line"></span><br><span class="line">REVOKE 取消授权</span><br></pre></td></tr></table></figure><blockquote><p>TCL</p></blockquote><p>英文全称（Transaction Control Language），即事务控制语言。</p><p>基本结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SAVEPOINT：保存点</span><br><span class="line"></span><br><span class="line">ROLLBACK：回退到某点</span><br><span class="line"></span><br><span class="line">COMMIT：提交事务</span><br></pre></td></tr></table></figure><blockquote><p>DAL </p></blockquote><p>英文全称（Data Access Layer），即数据访问层。</p><p>基本结构：对数据表的SELECT（查询）、INSERT（插入）、UPDATE（更新）、DELETE（删除）等操作</p><blockquote><p>CRUD</p></blockquote><p>CRUD其实是数据库基本操作中的CREATE(创建)、RETRIEVE(读取)、UPDATE（更新）、DELETE（删除）。都是针对记录而言。</p><blockquote><p>汇总</p></blockquote><p>SQL语言共分为四大类：数据定义语言DDL，数据操纵语言DML，数据查询语言DQL，数据控制语言DCL。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DQL、DML、DDL、DCL、TCL、DAL这些数据库语言，在平时可能经常会碰到。但是真要说出个一二三来，也许只能只言片语的回答出几句。废话少说，请看正文一起了解一下。&lt;/p&gt;
    
    </summary>
    
      <category term="名词解释" scheme="https://dongz.me/categories/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/"/>
    
      <category term="数据存储" scheme="https://dongz.me/categories/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="数据库语言" scheme="https://dongz.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security Oauth2初探</title>
    <link href="https://dongz.me/2019/02/24/Spring-Security-Oauth2%E5%88%9D%E6%8E%A2/"/>
    <id>https://dongz.me/2019/02/24/Spring-Security-Oauth2初探/</id>
    <published>2019-02-24T14:48:00.000Z</published>
    <updated>2019-02-27T16:37:12.118Z</updated>
    
    <content type="html"><![CDATA[<p>OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。<br>详细移步阮一峰的<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">理解OAuth 2.0</a>。  </p><p>OAuth2根据使用场景不同，分成了4种模式：  </p><p>授权码模式（authorization code）<br>简化模式（implicit）<br>密码模式（resource owner password credentials）<br>客户端模式（client credentials）  </p><p>采用Spring Boot 2.0 整合 Spring Security Oauth2搭建授权、资源服务器，可以分为简易的分为三个步骤：  </p><p>配置资源服务器<br>配置认证服务器<br>配置spring security   </p><p>前两点是oauth2的主体内容，但前面我已经描述过了，spring security oauth2是建立在spring security基础之上的，所以有一些体系是公用的。<br><a id="more"></a></p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><h3 id="授权服务器"><a href="#授权服务器" class="headerlink" title="授权服务器"></a>授权服务器</h3><blockquote><p>pom核心</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-security-jwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;!--jwt模式下添加该包--&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.0&lt;/version&gt;</span><br><span class="line">    &lt;!--jwt模式下添加该包--&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;</span><br><span class="line">     &lt;!--redis模式下添加该包--&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">    &lt;!--前端页面渲染引擎--&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>application.yml 配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8888</span><br><span class="line">spring:</span><br><span class="line">  redis: # redis模式下配置</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">    password:</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-wait: -1s</span><br><span class="line">        min-idle: 0</span><br><span class="line">        max-idle: 8</span><br><span class="line">    database: 4</span><br><span class="line">  thymeleaf: # thymeleaf配置</span><br><span class="line">    prefix: classpath:/static/</span><br><span class="line">    suffix: .html</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.springframework: debug</span><br><span class="line">merryyou:</span><br><span class="line">  security:</span><br><span class="line">    oauth2:</span><br><span class="line">      storeType: redis #或者jwt</span><br><span class="line">      jwtSigningKey: merryyou</span><br><span class="line">      clients[0]:</span><br><span class="line">        clientId: merryyou</span><br><span class="line">        clientSecret: merryyou</span><br><span class="line">      clients[1]:</span><br><span class="line">              clientId: merryyou1</span><br><span class="line">              clientSecret: merryyou1</span><br></pre></td></tr></table></figure><blockquote><p>用户登录账号信息服务:MyUserDetailsService.java</p></blockquote><p>登录用户账号密码认证：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyUserDetailsService implements UserDetailsService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line">        return new User(username, passwordEncoder.encode(&quot;123456&quot;), AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;ROLE_USER&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可改造数据库实现。</p><blockquote><p>redis和jwt基础配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class TokenStoreConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * redis连接工厂</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用于存放token</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnProperty(prefix = &quot;merryyou.security.oauth2&quot;, name = &quot;storeType&quot;, havingValue = &quot;redis&quot;)</span><br><span class="line">    public TokenStore redisTokenStore() &#123;</span><br><span class="line">        return new RedisTokenStore(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * jwt TOKEN配置信息</span><br><span class="line">     */</span><br><span class="line">    @Configuration</span><br><span class="line">    @ConditionalOnProperty(prefix = &quot;merryyou.security.oauth2&quot;, name = &quot;storeType&quot;, havingValue = &quot;jwt&quot;, matchIfMissing = true)</span><br><span class="line">    public static class JwtTokenCofnig&#123;</span><br><span class="line"></span><br><span class="line">        @Autowired</span><br><span class="line">        private OAuth2Properties oAuth2Properties;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 使用jwtTokenStore存储token</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        @Bean</span><br><span class="line">        public TokenStore jwtTokenStore()&#123;</span><br><span class="line">            return new JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 用于生成jwt</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        @Bean</span><br><span class="line">        public JwtAccessTokenConverter jwtAccessTokenConverter()&#123;</span><br><span class="line">            JwtAccessTokenConverter accessTokenConverter = new JwtAccessTokenConverter();</span><br><span class="line">            accessTokenConverter.setSigningKey(oAuth2Properties.getJwtSigningKey());//生成签名的key</span><br><span class="line">            return accessTokenConverter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 用于扩展JWT</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        @Bean</span><br><span class="line">        @ConditionalOnMissingBean(name = &quot;jwtTokenEnhancer&quot;)</span><br><span class="line">        public TokenEnhancer jwtTokenEnhancer()&#123;</span><br><span class="line">            return new MerryyouJwtTokenEnhancer();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>授权服务器相关配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAuthorizationServer</span><br><span class="line">public class MerryyouAuthorizationServerConfig extends AuthorizationServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OAuth2Properties oAuth2Properties;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TokenStore tokenStore;</span><br><span class="line"></span><br><span class="line">    @Autowired(required = false)</span><br><span class="line">    private JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line"></span><br><span class="line">    @Autowired(required = false)</span><br><span class="line">    private TokenEnhancer jwtTokenEnhancer;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    //路径映射，该方法没尝试成功</span><br><span class="line">//    @Autowired</span><br><span class="line">//    private AuthorizationEndpoint authorizationEndpoint;</span><br><span class="line">//    @PostConstruct</span><br><span class="line">//    public void init() &#123;</span><br><span class="line">//        // 自定义授权跳转</span><br><span class="line">//        authorizationEndpoint.setUserApprovalPage(&quot;forward:/auth/confirm_page&quot;);</span><br><span class="line">//        //自定义授权错误跳转</span><br><span class="line">//        authorizationEndpoint.setErrorPage(&quot;forward:/auth/error&quot;);</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * token存储、路径映射、用户认证设置等服务器端</span><br><span class="line">     * @param endpoints</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception &#123;</span><br><span class="line">        endpoints.tokenStore(tokenStore)</span><br><span class="line">                .authenticationManager(authenticationManager)</span><br><span class="line">                .pathMapping(&quot;/oauth/confirm_access&quot;, &quot;/auth/confirm_page&quot;) //自定义授权页</span><br><span class="line">                .pathMapping(&quot;/oauth/error&quot;, &quot;/auth/error&quot;) //自定义错误页</span><br><span class="line">                .userDetailsService(userDetailsService);</span><br><span class="line">        //扩展token返回结果</span><br><span class="line">        if (jwtAccessTokenConverter != null &amp;&amp; jwtTokenEnhancer != null) &#123;</span><br><span class="line">            TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();</span><br><span class="line">            List&lt;TokenEnhancer&gt; enhancerList = new ArrayList();</span><br><span class="line">            enhancerList.add(jwtTokenEnhancer);</span><br><span class="line">            enhancerList.add(jwtAccessTokenConverter);</span><br><span class="line">            tokenEnhancerChain.setTokenEnhancers(enhancerList);</span><br><span class="line">            //jwt</span><br><span class="line">            endpoints.tokenEnhancer(tokenEnhancerChain)</span><br><span class="line">                    .accessTokenConverter(jwtAccessTokenConverter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置客户端一些信息，可改造从数据库读取</span><br><span class="line">     *</span><br><span class="line">     * @param clients</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123;</span><br><span class="line">        InMemoryClientDetailsServiceBuilder build = clients.inMemory();</span><br><span class="line">        if (ArrayUtils.isNotEmpty(oAuth2Properties.getClients())) &#123;</span><br><span class="line">            for (OAuth2ClientProperties config : oAuth2Properties.getClients()) &#123;</span><br><span class="line">                build.withClient(config.getClientId())</span><br><span class="line">                        .secret(passwordEncoder.encode(config.getClientSecret()))</span><br><span class="line">                        .accessTokenValiditySeconds(config.getAccessTokenValiditySeconds())</span><br><span class="line">                        .refreshTokenValiditySeconds(60 * 60 * 24 * 15)</span><br><span class="line">                        .authorizedGrantTypes(&quot;refresh_token&quot;, &quot;password&quot;, &quot;authorization_code&quot;)//OAuth2支持的验证模式</span><br><span class="line">                        .redirectUris(&quot;http://test.cn&quot;)</span><br><span class="line">                        .scopes(&quot;all&quot;);</span><br><span class="line">//                        .autoApprove(false);//true授权为同意且自动跳转</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * springSecurity 授权表达式，</span><br><span class="line">     * @param security</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception &#123;</span><br><span class="line">        security.tokenKeyAccess(&quot;permitAll()&quot;);</span><br><span class="line">        security.checkTokenAccess(&quot;isAuthenticated()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>安全认证相关配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Override</span><br><span class="line">    public AuthenticationManager authenticationManagerBean() throws Exception &#123;</span><br><span class="line">        AuthenticationManager manager = super.authenticationManagerBean();</span><br><span class="line">        return manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用于密码加密，BCryptPasswordEncoder对相同的密码生成的结果每次都是不一样的</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public PasswordEncoder passwordEncoder() &#123;</span><br><span class="line">        return new BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.formLogin().permitAll().and().authorizeRequests().anyRequest().authenticated();//.and().userDetailsService(userDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启动类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@Slf4j</span><br><span class="line">public class SpringBoot2Oauth2Application &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OAuth2Properties oAuth2Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringBoot2Oauth2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/user/me&quot;)</span><br><span class="line">    public Principal user(Principal user)&#123;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义路径映射处理器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@SessionAttributes(&#123; &quot;authorizationRequest&quot; &#125;)</span><br><span class="line">public class AuthController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/auth/confirm_page&quot;)</span><br><span class="line">    public String handleAccessConfirmation(Map&lt;String, Object&gt; model,</span><br><span class="line">    HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;String, String&gt; scopes = (Map&lt;String, String&gt;) (model.containsKey(&quot;scopes&quot;) ?</span><br><span class="line">        model.get(&quot;scopes&quot;) : request.getAttribute(&quot;scopes&quot;));</span><br><span class="line">        List&lt;String&gt; scopeList = new ArrayList&lt;String&gt;();</span><br><span class="line">        for (String scope : scopes.keySet()) &#123;</span><br><span class="line">        scopeList.add(scope);</span><br><span class="line">        &#125;</span><br><span class="line">        model.put(&quot;scopeList&quot;, scopeList);</span><br><span class="line">        return &quot;auth_confirm&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/auth/error&quot;)</span><br><span class="line">    public String handleError(Map&lt;String, Object&gt; model, HttpServletRequest request) &#123;</span><br><span class="line">        Object error = request.getAttribute(&quot;error&quot;);</span><br><span class="line">        String errorSummary;</span><br><span class="line">        if (error instanceof OAuth2Exception) &#123;</span><br><span class="line">            OAuth2Exception oauthError = (OAuth2Exception) error;</span><br><span class="line">            errorSummary = HtmlUtils.htmlEscape(oauthError.getSummary());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            errorSummary = &quot;Unknown error&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        model.put(&quot;errorSummary&quot;, errorSummary);</span><br><span class="line">        return &quot;auth_error&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义认证页面</p></blockquote><p>auth_confirm.html：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;授权登录&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1, user-scalable=no&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;//i.gtimg.cn/vipstyle/frozenui/2.0.0/css/frozen.css&quot;/&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .block &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .ui-notice &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            padding: 20px 15px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .ui-notice p &#123;</span><br><span class="line">            color: #333;</span><br><span class="line">            font-weight: 600;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .ui-btn-primary &#123;</span><br><span class="line">            background-color: #02cd93;</span><br><span class="line">            border-color: #02cd93;</span><br><span class="line">            width: 14%;</span><br><span class="line">            margin-left: 43%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .ui-notice-btn &#123;</span><br><span class="line">            padding: 50px 0px 15px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;block&quot;&gt;</span><br><span class="line">    &lt;section class=&quot;ui-notice&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;icon icon-notice&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;p&gt;是否授权：&lt;span th:text=&quot;$&#123;session.authorizationRequest.clientId&#125;&quot;&gt;clientId&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">        &lt;div class=&quot;ui-notice-btn&quot;&gt;</span><br><span class="line">            &lt;form id=&apos;confirmationForm&apos; name=&apos;confirmationForm&apos; action=&quot;/oauth/authorize&quot; method=&apos;post&apos;&gt;</span><br><span class="line">                &lt;input name=&apos;user_oauth_approval&apos; value=&apos;true&apos; type=&apos;hidden&apos;/&gt;</span><br><span class="line">                &lt;input type=&quot;hidden&quot; name=&quot;_csrf&quot; th:value=&quot;$&#123;_csrf.getToken()&#125;&quot;/&gt;</span><br><span class="line">                &lt;!--写好授权访问领域--&gt;</span><br><span class="line">                &lt;div id=&quot;allCheck&quot; th:each=&quot;s : $&#123;scopeList&#125;&quot;&gt;</span><br><span class="line">                    &lt;label th:text=&quot;$&#123;s&#125;&quot;&gt;&lt;/label&gt;:&lt;input  th:name=&quot;$&#123;s&#125;&quot; value=&quot;false&quot; type=&quot;checkbox&quot;</span><br><span class="line">                                                          onclick=&quot;check(&apos;allCheck&apos;)&quot;/&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;input class=&quot;ui-btn-primary ui-btn-lg ui-btn-primary&quot; name=&apos;authorize&apos; value=&apos;确认&apos; type=&apos;submit&apos;/&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function $(t)</span><br><span class="line">    &#123;</span><br><span class="line">        return document.getElementById(t);</span><br><span class="line">    &#125;</span><br><span class="line">    function check(id)</span><br><span class="line">    &#123;</span><br><span class="line">        var checkobj=$(id)</span><br><span class="line">        var box=checkobj.getElementsByTagName(&apos;input&apos;);</span><br><span class="line">        for(var i=0;i&lt;box.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (box[i].checked == true) &#123;</span><br><span class="line">                box[i].value = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                box[i].value = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>自定义错误页面</p></blockquote><p>auth_error.html：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;出错了&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1, user-scalable=no&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;//i.gtimg.cn/vipstyle/frozenui/2.0.0/css/frozen.css&quot;/&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .block&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        .ui-notice&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            padding:20px 15px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        .ui-notice p&#123;</span><br><span class="line">            color:#333;</span><br><span class="line">            font-weight: 600;</span><br><span class="line">        &#125;</span><br><span class="line">        .ui-btn-primary&#123;</span><br><span class="line">            background-color: #02cd93;</span><br><span class="line">            border-color: #02cd93;</span><br><span class="line">            width: 14%;</span><br><span class="line">            margin-left: 43%;</span><br><span class="line">        &#125;</span><br><span class="line">        .ui-notice-btn&#123;</span><br><span class="line">            padding:50px 0px 15px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;block&quot;&gt;</span><br><span class="line">    &lt;section class=&quot;ui-notice&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;icon icon-notice&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;div class=&quot;ui-notice-btn&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p style=&quot;color:red;&quot;&gt;出错了！不能继续授权操作！&lt;/p&gt;</span><br><span class="line">                &lt;p th:utext=&quot;$&#123;errorSummary&#125;&quot;&gt;errorSummary &lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input class=&quot;ui-btn-primary ui-btn-lg ui-btn-primary&quot; onclick=&quot;login()&quot;  name=&apos;返回登录&apos; value=&apos;返回登录&apos; type=&apos;button&apos;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function login() &#123;</span><br><span class="line">        window.location.href = &quot;/login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="资源服务器"><a href="#资源服务器" class="headerlink" title="资源服务器"></a>资源服务器</h3><blockquote><p>pom核心配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><p>资源服务器权限配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableResourceServer</span><br><span class="line">public class MerryyouResourceServerConfiguration extends ResourceServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.csrf().disable().authorizeRequests().antMatchers(&quot;/**&quot;).authenticated().antMatchers(HttpMethod.GET, &quot;/api&quot;)</span><br><span class="line">                // 拦截用户，必须具有所列权限</span><br><span class="line">                .hasAuthority(&quot;ROLE_USER&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>application.yml 配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">auth-server: http://localhost:8888 # sso-server地址</span><br><span class="line">server:</span><br><span class="line">  port: 8889</span><br><span class="line">security:</span><br><span class="line">  oauth2:</span><br><span class="line">    client:</span><br><span class="line">      client-id: merryyou</span><br><span class="line">      client-secret: merryyou</span><br><span class="line">      user-authorization-uri: $&#123;auth-server&#125;/oauth/authorize #请求认证的地址</span><br><span class="line">      access-token-uri: $&#123;auth-server&#125;/oauth/token #请求令牌的地址</span><br><span class="line">    resource:</span><br><span class="line">#      jwt:  #jwt方式放开，redis方式下注释掉</span><br><span class="line">#        key-uri: $&#123;auth-server&#125;/oauth/token_key</span><br><span class="line">      user-info-uri: $&#123;auth-server&#125;/user/me</span><br><span class="line">      token-info-uri: $&#123;auth-server&#125;/oauth/check_token</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.springframework: debug</span><br></pre></td></tr></table></figure><blockquote><p>启动类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@RestController</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled = true)//开启注解</span><br><span class="line">public class SpringBoot2Oauth2ResourceApplication extends ResourceServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringBoot2Oauth2ResourceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/api&quot;)</span><br><span class="line">    @PreAuthorize(&quot;hasRole(&apos;ROLE_USER&apos;)&quot;)</span><br><span class="line">    public String success() &#123;</span><br><span class="line">        return &quot;SUCCESS&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关请求"><a href="#相关请求" class="headerlink" title="相关请求"></a>相关请求</h3><p>访问路径：<a href="http://localhost:8888/oauth/authorize?response_type=code&amp;client_id=merryyou&amp;redirect_uri=http://test.cn&amp;scope=all" target="_blank" rel="noopener">http://localhost:8888/oauth/authorize?response_type=code&amp;client_id=merryyou&amp;redirect_uri=http://test.cn&amp;scope=all</a></p><h3 id="相关接口"><a href="#相关接口" class="headerlink" title="相关接口"></a>相关接口</h3><blockquote><p>oauth2默认接口</p></blockquote><ol><li>/oauth/authorize：授权端点  </li><li>/oauth/token：令牌端点  </li><li>/oauth/confirm_access：用户确认授权页面请求  </li><li>/oauth/error：授权服务错误信息页面请求  </li><li>/oauth/check_token：用于资源服务访问的令牌解析端点  </li><li>/oauth/token_ key：提供公有密匙的端点，如果使用JWT令牌的话</li></ol><blockquote><p>授权码模式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST \</span><br><span class="line">  --url &apos;http://localhost:8888/oauth/token?scope=all&amp;redirect_uri=http%3A%2F%2Ftest.cn&amp;code=a3vGfS&amp;client_secret=merryyou&amp;client_id=merryyou&amp;grant_type=authorization_code&apos; \</span><br><span class="line">  --header &apos;authorization: Basic bWVycnl5b3U6bWVycnl5b3U=&apos; \</span><br><span class="line">  --header &apos;content-type: application/x-www-form-urlencoded&apos; \</span><br><span class="line">  --cookie JSESSIONID=E2FDB35E21F2C9F915C43AE9B17C5BAC</span><br></pre></td></tr></table></figure><blockquote><p>密码模式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST \</span><br><span class="line">  --url &apos;http://localhost:8888/oauth/token?scope=all&amp;password=123456&amp;username=admin&amp;grant_type=password&apos; \</span><br><span class="line">  --header &apos;authorization: Basic bWVycnl5b3U6bWVycnl5b3U=&apos; \</span><br><span class="line">  --header &apos;content-type: application/x-www-form-urlencoded&apos; \</span><br><span class="line">  --cookie JSESSIONID=E2FDB35E21F2C9F915C43AE9B17C5BAC</span><br></pre></td></tr></table></figure><blockquote><p>刷新token</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST \</span><br><span class="line">  --url &apos;http://localhost:8888/oauth/token?scope=all&amp;refresh_token=1abd4da5-f36d-49a4-9935-7762492e9730&amp;grant_type=refresh_token&apos; \</span><br><span class="line">  --header &apos;authorization: Basic bWVycnl5b3U6bWVycnl5b3U=&apos; \</span><br><span class="line">  --header &apos;content-type: application/x-www-form-urlencoded&apos; \</span><br><span class="line">  --cookie JSESSIONID=E2FDB35E21F2C9F915C43AE9B17C5BAC</span><br></pre></td></tr></table></figure><blockquote><p>测试资源服务器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl --request GET \</span><br><span class="line">  --url http://localhost:8889/api \</span><br><span class="line">  --header &apos;authorization: bearer 182c3334-c552-456f-81ef-e3d261d859fc&apos; \</span><br><span class="line">  --header &apos;content-type: application/json;charset=UTF-8&apos; \</span><br><span class="line">  --cookie JSESSIONID=E2FDB35E21F2C9F915C43AE9B17C5BAC</span><br></pre></td></tr></table></figure><blockquote><p>github源码</p></blockquote><p>请联系我</p><p><span style="display:none"><br><a href="https://github.com/alvin6233/springboot2.0-oauth2" target="_blank" rel="noopener">https://github.com/alvin6233/springboot2.0-oauth2</a><br>分支definelogin：HTTP FORM LOGIN  为本章讲述涉及的代码<br>分支master：HTTP Basic  为Basic认证模式<br></span></p><blockquote><p>参考</p></blockquote><p>[1] <a href="http://blog.didispace.com/spring-security-oauth2-xjf-1/" target="_blank" rel="noopener">http://blog.didispace.com/spring-security-oauth2-xjf-1/</a><br>[2] <a href="https://juejin.im/post/5ae5c06051882567137df8c9" target="_blank" rel="noopener">https://juejin.im/post/5ae5c06051882567137df8c9</a><br>[3<em>] <a href="https://github.com/longfeizheng/springboot2.0-oauth2" target="_blank" rel="noopener">https://github.com/longfeizheng/springboot2.0-oauth2</a><br>[4] <a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a><br>[5</em>] <a href="https://github.com/wanghongfei/spring-security-oauth2-example" target="_blank" rel="noopener">https://github.com/wanghongfei/spring-security-oauth2-example</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。&lt;br&gt;详细移步阮一峰的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解OAuth 2.0&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;OAuth2根据使用场景不同，分成了4种模式：  &lt;/p&gt;
&lt;p&gt;授权码模式（authorization code）&lt;br&gt;简化模式（implicit）&lt;br&gt;密码模式（resource owner password credentials）&lt;br&gt;客户端模式（client credentials）  &lt;/p&gt;
&lt;p&gt;采用Spring Boot 2.0 整合 Spring Security Oauth2搭建授权、资源服务器，可以分为简易的分为三个步骤：  &lt;/p&gt;
&lt;p&gt;配置资源服务器&lt;br&gt;配置认证服务器&lt;br&gt;配置spring security   &lt;/p&gt;
&lt;p&gt;前两点是oauth2的主体内容，但前面我已经描述过了，spring security oauth2是建立在spring security基础之上的，所以有一些体系是公用的。&lt;br&gt;
    
    </summary>
    
      <category term="系统认证授权" scheme="https://dongz.me/categories/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    
    
      <category term="oauth2" scheme="https://dongz.me/tags/oauth2/"/>
    
  </entry>
  
  <entry>
    <title>开源单点登陆系统CAS</title>
    <link href="https://dongz.me/2019/02/24/%E5%BC%80%E6%BA%90%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%86%E7%B3%BB%E7%BB%9FCAS/"/>
    <id>https://dongz.me/2019/02/24/开源单点登陆系统CAS/</id>
    <published>2019-02-24T14:45:00.000Z</published>
    <updated>2019-02-24T14:47:27.952Z</updated>
    
    <content type="html"><![CDATA[<p>ok，还是来看下官方介绍。原版是英文的，我这里弱弱的翻译下大概，不要见笑。当然英语大侠请直接看官方原版。<br>CAS是<code>Centrol Authentication Service</code>的简称。CAS是面向Web的企业多语言单点登录解决方案，是集身份验证和授权等功能的<br>综合性平台。CAS是一种开放且记录良好的身份验证协议。这里托管的同名开源Java服务器组件是通过该协议实现的，支持大量其他身份验证协议和功能。  </p><p>为了方便，本文采用maven overlay方式构建项目，cas提供了<code>cas-overlay-template</code>模板帮助构建项目。<br><a id="more"></a></p><h2 id="CAS服务端搭建"><a href="#CAS服务端搭建" class="headerlink" title="CAS服务端搭建"></a>CAS服务端搭建</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><blockquote><p>环境  </p></blockquote><p>JDK：1.8<br>IDE：IntelliJ IDEA<br>Mysql：5.6.35</p><blockquote><p>hosts设置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#添加</span><br><span class="line">127.0.0.1   cas.example.org</span><br></pre></td></tr></table></figure><h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><blockquote><p>下载模板</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 由于6.0及以后版本采用gradle构建，我们采用maven构建方式</span><br><span class="line">git clone -b 5.3 https://github.com/apereo/cas-overlay-template.git</span><br></pre></td></tr></table></figure><p>下载比较慢的可以直接下载zip包。</p><blockquote><p>初始编译打包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#项目下执行</span><br><span class="line">./build.sh package</span><br></pre></td></tr></table></figure><p>若项目拉取相关依赖包时比较慢，可以把<code>pom.xml</code>文件中的默认仓库修改为国内的例如阿里巴巴的镜像仓库。</p><blockquote><p>新建覆盖配置目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#项目下新建</span><br><span class="line">src/main/resources</span><br></pre></td></tr></table></figure><blockquote><p>复制配置类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 以后src/main/resources的配置文件会覆盖target目录下的配置文件，后面修改的配置类默认是指src/main/resources目录下的</span><br><span class="line">cp target/cas/WEB-INF/classes/application.properties src/main/resources/application.properties</span><br></pre></td></tr></table></figure><blockquote><p>修改日志配置文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 目标地址 etc/cas/config/log4j2.xml</span><br><span class="line">把：</span><br><span class="line">&lt;Property name=&quot;cas.log.dir&quot; &gt;.&lt;/Property&gt;</span><br><span class="line">替换为：</span><br><span class="line">&lt;Property name=&quot;cas.log.dir&quot; &gt;logs&lt;/Property&gt;</span><br></pre></td></tr></table></figure><blockquote><p>修改application.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.ssl.key-store=file:/etc/cas/keystore</span><br><span class="line">server.ssl.key-store-password=changeit</span><br><span class="line">server.ssl.key-password=changeit</span><br></pre></td></tr></table></figure><blockquote><p>证书相关</p></blockquote><p>因CAS默认使用SSL安全证书验证，本地要生产并添加相关证书。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 生成证书</span><br><span class="line">sudo keytool -genkey -alias cas -keyalg RSA -keysize 2048 -keypass changeit -storepass changeit -keystore /etc/cas/keystore -dname &quot;CN=cas.example.org,OU=alvin,O=alvin,L=Beijing,ST=BeiJing,C=CN&quot;</span><br><span class="line"># 导出证书到文件</span><br><span class="line">sudo keytool -exportcert -alias cas -keystore /etc/cas/keystore -file /etc/cas/cas.cer -storepass changeit</span><br><span class="line"># 将证书导入java证书库，到&#123;JAVA_HOME&#125;/jre/lib/security下执行</span><br><span class="line">sudo keytool -import -alias cas -keystore ./cacerts -file /etc/cas/cas.cer</span><br><span class="line"></span><br><span class="line"># 若中间证书生成错误，可通过如下命令删除</span><br><span class="line">#keytool -delete -alias cas -keystore ./cacerts</span><br></pre></td></tr></table></figure><p><strong>keytool相关参数说明：</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-alias       产生别名</span><br><span class="line">-keystore    指定密钥库的名称(产生的各类信息将不在.keystore文件中)</span><br><span class="line">-keyalg      指定密钥的算法 (如 RSA  DSA（如果不指定默认采用DSA）)</span><br><span class="line">-validity    指定创建的证书有效期多少天</span><br><span class="line">-keysize     指定密钥长度</span><br><span class="line">-storepass   指定密钥库的密码(获取keystore信息所需的密码)</span><br><span class="line">-keypass     指定别名条目的密码(私钥的密码)</span><br><span class="line">-dname       指定证书拥有者信息 例如：  &quot;CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名称,ST=州或省份名称,C=单位的两字母国家代码&quot;</span><br><span class="line">-list        显示密钥库中的证书信息      </span><br><span class="line">-v           显示密钥库中的证书详细信息</span><br><span class="line">-export      将别名指定的证书导出到文件  </span><br><span class="line">-file        参数指定导出到文件的文件名</span><br><span class="line">-delete      删除密钥库中某条目         </span><br><span class="line">-printcert   查看导出的证书信息          </span><br><span class="line">-keypasswd   修改密钥库中指定条目口令   </span><br><span class="line">-storepasswd 修改keystore口令     </span><br><span class="line">-import      将已签名数字证书导入密钥库</span><br></pre></td></tr></table></figure><blockquote><p>启动项目</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#执行</span><br><span class="line">./build.sh run</span><br></pre></td></tr></table></figure><blockquote><p>访问登录</p></blockquote><p>默认登录页：<a href="https://cas.example.org:8443/cas/login" target="_blank" rel="noopener">https://cas.example.org:8443/cas/login</a>  </p><p>账号在application.properties文件中，通过属性<code>cas.authn.accept.users</code>配置，默认为<code>casuser::Mellon</code></p><h3 id="CAS-Mysql账号管理"><a href="#CAS-Mysql账号管理" class="headerlink" title="CAS + Mysql账号管理"></a>CAS + Mysql账号管理</h3><p>上一章节中，账号信息维护在配置文件中。在实际项目中我们的账号大多维护在LDAP、Mysql等存储系统中。这里我们使用Mysql存储系统来实战演练。  </p><blockquote><p>创建库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `sso` /*!40100 DEFAULT CHARACTER SET utf8 */;</span><br></pre></td></tr></table></figure><blockquote><p>创建账号表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `sso_user` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `account` varchar(30) NOT NULL,</span><br><span class="line">  `pwd` varchar(30) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加账号</span><br><span class="line">insert into sso_user(account,pwd) values(&apos;alvin&apos;,&apos;alvin&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>修改application.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 注释掉默认配置</span><br><span class="line">#cas.authn.accept.users=casuser::Mellon</span><br><span class="line"></span><br><span class="line"># 添加Mysql配置</span><br><span class="line">cas.authn.jdbc.query[0].url=jdbc:mysql://localhost:3306/sso?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false</span><br><span class="line">cas.authn.jdbc.query[0].user=root</span><br><span class="line">cas.authn.jdbc.query[0].password=</span><br><span class="line">cas.authn.jdbc.query[0].sql=select * from sso_user where account=?</span><br><span class="line">cas.authn.jdbc.query[0].fieldPassword=pwd</span><br><span class="line">cas.authn.jdbc.query[0].driverClass=com.mysql.jdbc.Driver</span><br><span class="line">cas.authn.jdbc.query[0].dialect=org.hibernate.dialect.MySQLDialect</span><br></pre></td></tr></table></figure><p>mysql配置参数有很多，这里我们只选了最主要的，详细可<a href="https://apereo.github.io/cas/5.3.x/installation/Configuration-Properties.html#query-database-authentication" target="_blank" rel="noopener">参考官方</a>。</p><blockquote><p>启动项目</p></blockquote><p>打包命令：<code>./build.sh package</code>  </p><p>更新SNAPSHOT版本：<code>./build.sh package -U</code></p><p>启动项目：<code>./build.sh run</code></p><p>启动之后访问登录页，就可以通过alvin/alvin账号进行访问了。</p><h3 id="CAS-OAUTH2-0-授权"><a href="#CAS-OAUTH2-0-授权" class="headerlink" title="CAS + OAUTH2.0 授权"></a>CAS + OAUTH2.0 授权</h3><p>CAS支持现在流行的Oauth2.0协议，下面开始集成Oauth2.0。 </p><blockquote><p>pom.xml添加Oauth依赖插件包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- oauth2.0 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.apereo.cas&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;cas-server-support-oauth-webflow&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;$&#123;cas.version&#125;&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">&lt;!-- oauth2.0 --&gt;</span><br></pre></td></tr></table></figure><blockquote><p>application.properties添加Oauth配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># oauth2.0</span><br><span class="line">cas.authn.oauth.refreshToken.timeToKillInSeconds=2592000</span><br><span class="line">cas.authn.oauth.code.timeToKillInSeconds=30</span><br><span class="line">cas.authn.oauth.code.numberOfUses=1</span><br><span class="line">cas.authn.oauth.accessToken.releaseProtocolAttributes=true</span><br><span class="line">cas.authn.oauth.accessToken.timeToKillInSeconds=7200</span><br><span class="line">cas.authn.oauth.accessToken.maxTimeToLiveInSeconds=28800</span><br><span class="line">cas.authn.oauth.grants.resourceOwner.requireServiceHeader=true</span><br><span class="line">cas.authn.oauth.userProfileViewType=NESTED</span><br><span class="line"></span><br><span class="line"># http协议支持</span><br><span class="line">cas.tgc.secure=false</span><br><span class="line">cas.serviceRegistry.initFromJson=true</span><br></pre></td></tr></table></figure><blockquote><p>修改http service注册文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># resources下创建services目录</span><br><span class="line">mkdir -p src/main/resources/services</span><br><span class="line"></span><br><span class="line"># 复制target/classes/services/HTTPSandIMAPS-10000001.json 到 src/main/resources/services</span><br><span class="line">cp target/classes/services/HTTPSandIMAPS-10000001.json src/main/resources/services/HTTPSandIMAPS-10000001.json</span><br><span class="line"></span><br><span class="line"># 修改resources下HTTPSandIMAPS-10000001.json serviceId属性支持http跳转</span><br><span class="line">&quot;serviceId&quot; : &quot;^(https|http|imaps)://.*&quot;</span><br></pre></td></tr></table></figure><blockquote><p>添加Oauth service注册文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd src/main/resources/services</span><br><span class="line"></span><br><span class="line"># 添加 OAUTH-1002.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@class&quot; : &quot;org.apereo.cas.support.oauth.services.OAuthRegisteredService&quot;,</span><br><span class="line">  &quot;clientId&quot;: &quot;20190131&quot;,</span><br><span class="line">  &quot;clientSecret&quot;: &quot;password&quot;,</span><br><span class="line">  &quot;serviceId&quot; : &quot;^(https|http|imaps)://.*&quot;,</span><br><span class="line">  &quot;name&quot; : &quot;OAuthService&quot;,</span><br><span class="line">  &quot;id&quot; : 1002</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启动测试</p></blockquote><p>访问：<a href="https://cas.example.org:8443/cas/oauth2.0/authorize?response_type=code&amp;client_id=20190131&amp;redirect_uri=http://www.baidu.com" target="_blank" rel="noopener">https://cas.example.org:8443/cas/oauth2.0/authorize?response_type=code&amp;client_id=20190131&amp;redirect_uri=http://www.baidu.com</a><br>登录后跳转到：<a href="http://www.baidu.com/?code=OC-3-5h6S0EQ9viwMfkCC8n8Mt0XdY6BOJqHd" target="_blank" rel="noopener">http://www.baidu.com/?code=OC-3-5h6S0EQ9viwMfkCC8n8Mt0XdY6BOJqHd</a></p><h3 id="CAS-GitHub第三方登录"><a href="#CAS-GitHub第三方登录" class="headerlink" title="CAS GitHub第三方登录"></a>CAS GitHub第三方登录</h3><blockquote><p>pom.xml中添加</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 作为oauth客户端，接入第三方账号体系 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apereo.cas&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cas-server-support-pac4j-webflow&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;cas.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 作为oauth客户端，接入第三方账号体系 --&gt;</span><br></pre></td></tr></table></figure><blockquote><p>GitHub创建应用</p></blockquote><p><strong>依次点击：</strong> <code>Settings=&gt;Developer settings=&gt;OAuth Apps=&gt;New OAuth App</code><br><strong>填写内容：</strong><br>Application name：mysso(应用名，可自定义)<br>Homepage URL：<a href="https://cas.example.org:8443/cas/login（cas的登录页）" target="_blank" rel="noopener">https://cas.example.org:8443/cas/login（cas的登录页）</a><br>Authorization callback URL：<a href="https://cas.example.org:8443/cas/login（cas的登录页）" target="_blank" rel="noopener">https://cas.example.org:8443/cas/login（cas的登录页）</a></p><p><strong>点击：Register application</strong>  完成创建。  </p><p><strong>创建后生成：</strong><br>Client ID：8ad4561102267db11111<br>Client Secret：08f41ed820537ce2e8cad722de209cfc59a11111</p><blockquote><p>application.properties添加配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ahthn第三方登录</span><br><span class="line">cas.authn.pac4j.github.id=8ad4561102267db11111</span><br><span class="line">cas.authn.pac4j.github.secret=08f41ed820537ce2e8cad722de209cfc59a11111</span><br><span class="line">cas.authn.pac4j.github.clientName=GitHub Login</span><br></pre></td></tr></table></figure><blockquote><p>启动测试</p></blockquote><p>启动后点击<code>GitHub Login</code>即可使用Github账号密码登录。  </p><h2 id="CAS客户端搭建"><a href="#CAS客户端搭建" class="headerlink" title="CAS客户端搭建"></a>CAS客户端搭建</h2><h3 id="配置本地host"><a href="#配置本地host" class="headerlink" title="配置本地host"></a>配置本地host</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#本地host添加</span><br><span class="line">127.0.0.1 casclient2.com</span><br><span class="line">127.0.0.1 casclient1.com</span><br></pre></td></tr></table></figure><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><blockquote><p>pom.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--cas客户端核心包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.jasig.cas.client&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cas-client-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;java.cas.client.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>创建过滤器类：DefineUrlPatternMatcherStrategy.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 过滤器类</span><br><span class="line"> * @author: alvin</span><br><span class="line"> * @datetime: 2019-02-12 18:07</span><br><span class="line"> * @description: 过滤掉不需要授权登录的页面.</span><br><span class="line"> */</span><br><span class="line">public class DefineUrlPatternMatcherStrategy implements UrlPatternMatcherStrategy &#123;</span><br><span class="line"></span><br><span class="line">    private Pattern pattern;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * description:判断是否匹配这个字符串</span><br><span class="line">     * @param: [url]用户请求的连接</span><br><span class="line">     * @return: true:不需要拦截</span><br><span class="line">     *          false:必须要登录</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean matches(String url) &#123;</span><br><span class="line">        //使用正则表达式来匹配需要忽略的连接</span><br><span class="line">        return this.pattern.matcher(url).find();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * description:正则表达式的规则，该规则在配置AuthenticationFilter的ignorePattern中设置</span><br><span class="line">     * @param: [pattern]</span><br><span class="line">     * @return: void</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void setPattern(String url) &#123;</span><br><span class="line">        this.pattern = Pattern.compile(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建首页控制器：HomeController.java </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HomeController &#123;</span><br><span class="line">    @RequestMapping(value=&#123;&quot;/&quot;, &quot;/home&quot;&#125;)</span><br><span class="line">    public String home(HttpServletRequest request) &#123;</span><br><span class="line"></span><br><span class="line">        //获取cas给我们传递回来的对象，这个对象在Session中</span><br><span class="line">        //session的 key是 CONST_CAS_ASSERTION</span><br><span class="line">        Assertion assertion = (Assertion) request.getSession().getAttribute(AbstractCasFilter.CONST_CAS_ASSERTION);</span><br><span class="line"></span><br><span class="line">        Principal principal  = assertion.getPrincipal();</span><br><span class="line"></span><br><span class="line">        String loginName =principal.getName();</span><br><span class="line">        System.out.printf(&quot;登录用户名:%s\r\n&quot;,loginName);</span><br><span class="line"></span><br><span class="line">        System.out.printf(&quot;ValidFromDate:%s\r\n&quot;,assertion.getValidFromDate());</span><br><span class="line">        System.out.printf(&quot;ValidUntilDate:%s\r\n&quot;,assertion.getValidUntilDate());</span><br><span class="line">        System.out.printf(&quot;AuthenticationDate:%s\r\n&quot;,assertion.getAuthenticationDate());</span><br><span class="line"></span><br><span class="line">        //获取自定义返回值的数据</span><br><span class="line">        if (principal instanceof AttributePrincipal) &#123;</span><br><span class="line">            //cas传递过来的数据</span><br><span class="line">            Map&lt;String,Object&gt; result =( (AttributePrincipal)principal).getAttributes();</span><br><span class="line">            for(Map.Entry&lt;String, Object&gt; entry :result.entrySet()) &#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                Object val = entry.getValue();</span><br><span class="line">                System.out.printf(&quot;%s:%s\r\n&quot;,key,val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &quot;home&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>首页html代码：home.html</p></blockquote><p>路径：src/main/resources/templates/home.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;当前所在子系统：测试系统1&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;&lt;a href=&quot;http://casclient1.com:8001/&quot;&gt;系统1&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;&lt;a href=&quot;http://casclient2.com:8002/&quot;&gt;系统2&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">&lt;b&gt;Authenticated User Id:&lt;/b&gt; &lt;a href=&quot;logout.jsp&quot; title=&quot;Click here to log out&quot; th:text=&quot;$&#123;#request.remoteUser&#125;&quot;/&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;a th:href=&quot;$&#123;#request.contextPath&#125;+&apos;/logoutDefault&apos;&quot; title=&quot;Click here to log out&quot;&gt;退出系统（默认退出页面）&lt;/a&gt;</span><br><span class="line">&lt;a th:href=&quot;$&#123;#request.contextPath&#125;+&apos;/logoutCustom&apos;&quot; title=&quot;Click here to log out&quot;&gt;退出系统（定制退出页面）&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>登出控制器：LogoutController.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class LogoutController &#123;</span><br><span class="line">    @RequestMapping(&quot;/logoutDefault&quot;)</span><br><span class="line">    public String logout1(HttpSession session) &#123;</span><br><span class="line">        session.invalidate();</span><br><span class="line"></span><br><span class="line">        // 直接退出，走默认退出方式</span><br><span class="line">        return &quot;redirect:https://cas.example.org:8443/cas/logout&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/logoutCustom&quot;)</span><br><span class="line">    public String logout2(HttpSession session) &#123;</span><br><span class="line">        session.invalidate();</span><br><span class="line">        // 退出登录后，跳转到退出成功的页面，不走默认页面</span><br><span class="line">        return &quot;redirect:https://cas.example.org:8443/cas/logout?service=http://casclient1.com:8001/logout/success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/logout/success&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String logout2() &#123;</span><br><span class="line">        return &quot;系统1注销成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置类：application.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=cas-client1</span><br><span class="line">server.port=8001</span><br></pre></td></tr></table></figure><blockquote><p>启动类：CasClientApplication.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class CasClientApplication &#123;</span><br><span class="line">    private static final String CAS_SERVER_URL_PREFIX = &quot;https://cas.example.org:8443/cas/&quot;;</span><br><span class="line">    private static final String CAS_SERVER_URL_LOGIN = &quot;https://cas.example.org:8443/cas/login&quot;;</span><br><span class="line"></span><br><span class="line">    //本机的名称</span><br><span class="line">    private static final String SERVER_NAME = &quot;http://casclient1.com:8001/&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * description: 登录过滤器</span><br><span class="line">     * @param: []</span><br><span class="line">     * @return: org.springframework.boot.web.servlet.FilterRegistrationBean</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean filterSingleRegistration() &#123;</span><br><span class="line">        FilterRegistrationBean registration = new FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(new SingleSignOutFilter());</span><br><span class="line">        // 设定匹配的路径</span><br><span class="line">        registration.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">        Map&lt;String,String&gt; initParameters = new HashMap&lt;String, String&gt;();</span><br><span class="line">        initParameters.put(&quot;casServerUrlPrefix&quot;, CAS_SERVER_URL_PREFIX);</span><br><span class="line">        registration.setInitParameters(initParameters);</span><br><span class="line">        // 设定加载的顺序</span><br><span class="line">        registration.setOrder(1);</span><br><span class="line">        return registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * description:过滤验证器</span><br><span class="line">     *     * @param: []</span><br><span class="line">     * @return: org.springframework.boot.web.servlet.FilterRegistrationBean</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean filterValidationRegistration() &#123;</span><br><span class="line">        FilterRegistrationBean registration = new FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(new Cas30ProxyReceivingTicketValidationFilter());</span><br><span class="line">        // 设定匹配的路径</span><br><span class="line">        registration.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">        Map&lt;String,String&gt;  initParameters = new HashMap&lt;String, String&gt;();</span><br><span class="line">        initParameters.put(&quot;casServerUrlPrefix&quot;, CAS_SERVER_URL_PREFIX);</span><br><span class="line">        initParameters.put(&quot;serverName&quot;, SERVER_NAME);</span><br><span class="line">        initParameters.put(&quot;useSession&quot;, &quot;true&quot;);</span><br><span class="line">        registration.setInitParameters(initParameters);</span><br><span class="line">        // 设定加载的顺序</span><br><span class="line">        registration.setOrder(1);</span><br><span class="line">        return registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * description:授权过滤器</span><br><span class="line">     * @param: []</span><br><span class="line">     * @return: org.springframework.boot.web.servlet.FilterRegistrationBean</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean filterAuthenticationRegistration() &#123;</span><br><span class="line">        FilterRegistrationBean registration = new FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(new AuthenticationFilter());</span><br><span class="line">        // 设定匹配的路径</span><br><span class="line">        registration.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">        Map&lt;String,String&gt;  initParameters = new HashMap&lt;String, String&gt;();</span><br><span class="line">        initParameters.put(&quot;casServerLoginUrl&quot;, CAS_SERVER_URL_LOGIN);</span><br><span class="line">        initParameters.put(&quot;serverName&quot;, SERVER_NAME);</span><br><span class="line">        //忽略/logout的路径</span><br><span class="line">        initParameters.put(&quot;ignorePattern&quot;, &quot;/logout/*&quot;);</span><br><span class="line">        initParameters.put(&quot;ignoreUrlPatternType&quot;, &quot;com.alvin.casclient.config.DefineUrlPatternMatcherStrategy&quot;);</span><br><span class="line"></span><br><span class="line">        registration.setInitParameters(initParameters);</span><br><span class="line">        // 设定加载的顺序</span><br><span class="line">        registration.setOrder(1);</span><br><span class="line">        return registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * wraper过滤器</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean filterWrapperRegistration() &#123;</span><br><span class="line">        FilterRegistrationBean registration = new FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(new HttpServletRequestWrapperFilter());</span><br><span class="line">        // 设定匹配的路径</span><br><span class="line">        registration.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">        // 设定加载的顺序</span><br><span class="line">        registration.setOrder(1);</span><br><span class="line">        return registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加监听器</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletListenerRegistrationBean&lt;EventListener&gt; singleSignOutListenerRegistration()&#123;</span><br><span class="line">        ServletListenerRegistrationBean&lt;EventListener&gt; registrationBean = new ServletListenerRegistrationBean&lt;EventListener&gt;();</span><br><span class="line">        registrationBean.setListener(new SingleSignOutHttpSessionListener());</span><br><span class="line">        registrationBean.setOrder(1);</span><br><span class="line">        return registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(CasClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多个客户端可通过复制做适当修改即可</p><p>启动系统1和系统2客户端</p></blockquote><p>启动后访问：<a href="http://casclient1.com，" target="_blank" rel="noopener">http://casclient1.com，</a><br>跳转到：<a href="https://cas.example.org:8443/cas/login?service=http%3A%2F%2Fcasclient1.com%3A8001%2F" target="_blank" rel="noopener">https://cas.example.org:8443/cas/login?service=http%3A%2F%2Fcasclient1.com%3A8001%2F</a><br>登录后跳转到：<a href="http://casclient1.com:8001/" target="_blank" rel="noopener">http://casclient1.com:8001/</a><br>点击页面中系统2，无需登录跳转到：<a href="http://casclient2.com:8002/" target="_blank" rel="noopener">http://casclient2.com:8002/</a><br>退出：可以退出到默认路径，也可以退出到自定义路径  </p><blockquote><p>客户端更简单的接入方式：第三方starter</p></blockquote><p>详细请参考：<a href="https://www.jianshu.com/p/363ae6594ec3" target="_blank" rel="noopener">springboot 整合CAS Client实现单点登陆</a></p><blockquote><p>参考：</p></blockquote><p>[1] <a href="https://blog.iamzhl.top/CAS-5-3-4-install-and-deploy.html" target="_blank" rel="noopener">https://blog.iamzhl.top/CAS-5-3-4-install-and-deploy.html</a><br>[2] <a href="https://www.jianshu.com/p/eefddd410aaf" target="_blank" rel="noopener">https://www.jianshu.com/p/eefddd410aaf</a><br>[3] <a href="https://haoranjunzi.gitee.io/2018/08/15/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CAS5%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%88%E4%B8%80%E3%80%81%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/" target="_blank" rel="noopener">https://haoranjunzi.gitee.io/2018/08/15/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CAS5%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%88%E4%B8%80%E3%80%81%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/</a><br>[4] <a href="https://www.jianshu.com/p/2bd8f2b1db86" target="_blank" rel="noopener">https://www.jianshu.com/p/2bd8f2b1db86</a><br>[5] <a href="https://blog.csdn.net/qq_34021712/article/details/82290876" target="_blank" rel="noopener">https://blog.csdn.net/qq_34021712/article/details/82290876</a><br>[6] <a href="https://www.jianshu.com/p/15b88fa0d068" target="_blank" rel="noopener">https://www.jianshu.com/p/15b88fa0d068</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ok，还是来看下官方介绍。原版是英文的，我这里弱弱的翻译下大概，不要见笑。当然英语大侠请直接看官方原版。&lt;br&gt;CAS是&lt;code&gt;Centrol Authentication Service&lt;/code&gt;的简称。CAS是面向Web的企业多语言单点登录解决方案，是集身份验证和授权等功能的&lt;br&gt;综合性平台。CAS是一种开放且记录良好的身份验证协议。这里托管的同名开源Java服务器组件是通过该协议实现的，支持大量其他身份验证协议和功能。  &lt;/p&gt;
&lt;p&gt;为了方便，本文采用maven overlay方式构建项目，cas提供了&lt;code&gt;cas-overlay-template&lt;/code&gt;模板帮助构建项目。&lt;br&gt;
    
    </summary>
    
      <category term="系统认证授权" scheme="https://dongz.me/categories/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    
    
      <category term="sso" scheme="https://dongz.me/tags/sso/"/>
    
  </entry>
  
  <entry>
    <title>【转】MySQL性能优化神器Explain使用教程</title>
    <link href="https://dongz.me/2019/02/24/%E3%80%90%E8%BD%AC%E3%80%91MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8Explain%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://dongz.me/2019/02/24/【转】MySQL性能优化神器Explain使用教程/</id>
    <published>2019-02-24T14:40:00.000Z</published>
    <updated>2019-02-24T14:40:34.733Z</updated>
    
    <content type="html"><![CDATA[<p>转载一篇对MySQL优化神器<code>EXPLAIN</code>介绍比较详细的一篇文章。原文请直接点击<a href="https://www.xttblog.com/?p=3524" target="_blank" rel="noopener">MySQL 性能优化神器 Explain 使用教程(https://www.xttblog.com/?p=3524)</a>。  </p><p><code>MySQL</code> 提供了一个 <code>EXPLAIN</code> 命令，它可以对 <code>SELECT</code> 语句进行分析，并输出 <code>SELECT</code> 执行的详细信息，以供开发人员针对性优化。<br><a id="more"></a></p><h2 id="EXPLAIN-如何用？"><a href="#EXPLAIN-如何用？" class="headerlink" title="EXPLAIN 如何用？"></a>EXPLAIN 如何用？</h2><p>EXPLAIN 命令用法十分简单，在 SELECT 语句前加上 EXPLAIN 就可以了，例如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM xttblog WHERE id &lt; 300;</span><br></pre></td></tr></table></figure><p>为了演示 EXPLAIN，我们先创建一张表 xttblog。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `xttblog` (</span><br><span class="line">  `id`   BIGINT(20)  NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(50) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  `age`  INT(11)              DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `name_index` (`name`)</span><br><span class="line">)</span><br><span class="line">  ENGINE = InnoDB</span><br><span class="line">  DEFAULT CHARSET = utf8</span><br><span class="line"> </span><br><span class="line">INSERT INTO xttblog (name, age) VALUES (&apos;xys&apos;, 20);</span><br><span class="line">INSERT INTO xttblog (name, age) VALUES (&apos;a&apos;, 21);</span><br><span class="line">INSERT INTO xttblog (name, age) VALUES (&apos;b&apos;, 23);</span><br><span class="line">INSERT INTO xttblog (name, age) VALUES (&apos;c&apos;, 50);</span><br><span class="line">INSERT INTO xttblog (name, age) VALUES (&apos;d&apos;, 15);</span><br><span class="line">INSERT INTO xttblog (name, age) VALUES (&apos;e&apos;, 20);</span><br><span class="line">INSERT INTO xttblog (name, age) VALUES (&apos;f&apos;, 21);</span><br><span class="line">INSERT INTO xttblog (name, age) VALUES (&apos;g&apos;, 23);</span><br><span class="line">INSERT INTO xttblog (name, age) VALUES (&apos;h&apos;, 50);</span><br><span class="line">INSERT INTO xttblog (name, age) VALUES (&apos;i&apos;, 15);</span><br></pre></td></tr></table></figure><h2 id="EXPLAIN-命令的输出内容"><a href="#EXPLAIN-命令的输出内容" class="headerlink" title="EXPLAIN 命令的输出内容"></a>EXPLAIN 命令的输出内容</h2><p>EXPLAIN 命令输出的格式大致如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from xttblog where id = 2\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: xttblog</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: const</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 8</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>对于每个字段的解释如下：  </p><ul><li>id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.  </li><li>select_type: SELECT 查询的类型.  </li><li>table: 查询的是哪个表  </li><li>partitions: 匹配的分区  </li><li>type: join 类型  </li><li>possible_keys: 此次查询中可能选用的索引  </li><li>key: 此次查询中确切使用到的索引.  </li><li>ref: 哪个字段或常数与 key 一起被使用.  </li><li>rows: 显示此查询一共扫描了多少行. 这个是一个估计值.  </li><li>filtered: 表示此查询条件所过滤的数据的百分比.  </li><li>extra: 额外的信息.  </li></ul><p>每个字段的含义我们可能都了解了，但是每个字段都对应好几个值。那么每个值又代表什么意思呢？下面我们针对每个关键字代表什么意思，再来单独解释一下！  </p><blockquote><p>select_type</p></blockquote><p>select_type 表示了查询的类型, 它的常用取值有：  </p><ul><li>SIMPLE：表示此查询不包含 UNION 查询或子查询  </li><li>PRIMARY：表示此查询是最外层的查询  </li><li>UNION：表示此查询是 UNION 的第二或随后的查询  </li><li>DEPENDENT UNION：UNION 中的第二个或后面的查询语句, 取决于外面的查询  </li><li>UNION RESULT：UNION 的结果  </li><li>SUBQUERY：子查询中的第一个 SELECT  </li><li>DEPENDENT SUBQUERY：子查询中的第一个 SELECT，取决于外面的查询。即子查询依赖于外层查询的结果</li></ul><p>最常见的查询类别应该是 SIMPLE 了，比如当我们的查询没有子查询，也没有 UNION 查询时，那么通常就是 SIMPLE 类型。  </p><blockquote><p>table</p></blockquote><p>table，表示查询涉及的表或衍生表。xttblog 代表的就是 xttblog 表。<union1,2> 代表的就是，第一条和第二条查询出来的结果的合集。</union1,2></p><blockquote><p>partitions</p></blockquote><p>partitions: NULL。代表的是是否使用了分区，null 表明没有分区。  </p><blockquote><p>type</p></blockquote><p>type 字段比较重要，它提供了判断查询是否高效的重要依据依据。通过 type 字段，我们判断此次查询是全表扫描还是索引扫描等。</p><p>type 常用的取值有：  </p><ul><li>system: 表中只有一条数据。这个类型是特殊的 const 类型  </li><li>const: 针对主键或唯一索引的等值查询扫描，最多只返回一行数据。const 查询速度非常快，因为它仅仅读取一次即可  </li><li>eq_ref: 此类型通常出现在多表的 join 查询，表示对于前表的每一个结果，都只能匹配到后表的一行结果。并且查询的比较操作通常是 =，查询效率较高  </li><li>ref: 此类型通常出现在多表的 join 查询，针对于非唯一或非主键索引，或者是使用了最左前缀规则索引的查询  </li><li>range: 表示使用索引范围查询, 通过索引字段范围获取表中部分数据记录. 这个类型通常出现在 =，&lt;&gt;，&gt;，&gt;=，&lt;，&lt;=，IS NULL，&lt;=&gt;，BETWEEN，IN() 操作中。当 type 是 range 时，那么 EXPLAIN 输出的 ref 字段为 NULL，并且 key_len 字段是此次查询中使用到的索引的最长的那个  </li><li>index: 表示全索引扫描(full index scan)和 ALL 类型类似，只不过 ALL 类型是全表扫描，而 index 类型则仅仅扫描所有的索引，而不扫描数据。index 类型通常出现在: 所要查询的数据直接在索引树中就可以获取到，而不需要扫描数据。当是这种情况时，Extra 字段 会显示 Using index  </li><li>ALL: 表示全表扫描，这个类型的查询是性能最差的查询之一。通常来说，我们的查询不应该出现 ALL 类型的查询，因为这样的查询在数据量大的情况下，对数据库的性能是巨大的灾难。如一个查询是 ALL 类型查询，那么一般来说可以对相应的字段添加索引来避免  </li></ul><blockquote><p>type 类型的性能比较</p></blockquote><p>通常来说，不同的 type 类型的性能关系不一样。ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system。ALL 类型因为是全表扫描，因此在相同的查询条件下， 它是速度最慢的。而 index 类型的查询虽然不是全表扫描，但是它扫描了所有的索引，因此比 ALL 类型的稍快。后面的几种类型都是利用了索引来查询数据，因此可以过滤部分或大部分数据， 因此查询效率就比较高了。</p><blockquote><p>possible_keys</p></blockquote><p>possible_keys 表示 MySQL 在查询时，能够使用到的索引。注意，即使有些索引在 possible_keys 中出现，但是并不表示此索引会真正地被 MySQL 使用到。MySQL 在查询时具体使用了哪些索引，由 key 字段决定。  </p><blockquote><p>key</p></blockquote><p>此字段是 MySQL 在当前查询时所真正使用到的索引。</p><blockquote><p>key_len</p></blockquote><p>表示查询优化器使用了索引的字节数。这个字段可以评估组合索引是否完全被使用，或只有最左部分字段被使用到。key_len 的计算规则如下：  </p><ul><li>字符串  <ul><li>char(n): n 字节长度  </li><li>varchar(n): 如果是 utf8 编码, 则是 3 n + 2字节; 如果是 utf8mb4 编码, 则是 4 n + 2 字节  </li></ul></li><li>数值类型:  <ul><li>TINYINT: 1字节  </li><li>SMALLINT: 2字节  </li><li>MEDIUMINT: 3字节  </li><li>INT: 4字节  </li><li>BIGINT: 8字节  </li></ul></li><li>时间类型  <ul><li>DATE: 3字节  </li><li>TIMESTAMP: 4字节  </li><li>DATETIME: 8字节  </li></ul></li><li>字段属性: NULL 属性 占用一个字节。如果一个字段是 NOT NULL 的, 则没有此属性</li></ul><blockquote><p>rows</p></blockquote><p>rows 也是一个重要的字段。MySQL 查询优化器根据统计信息，估算 SQL 要查找到结果集需要扫描读取的数据行数。这个值非常直观显示 SQL 的效率好坏，原则上 rows 越少越好。  </p><blockquote><p>Extra</p></blockquote><p>EXPLAIN 中的很多额外的信息会在 Extra 字段显示，常见的有以下几种内容：</p><ul><li>Using filesort：当 Extra 中有 Using filesort 时，表示 MySQL 需额外的排序操作，不能通过索引顺序达到排序效果。一般有 Using filesort，都建议优化去掉，因为这样的查询 CPU 资源消耗大。  </li><li>Using index：”覆盖索引扫描”，表示查询在索引树中就可查找所需数据，不用扫描表数据文件，往往说明性能不错  </li><li>Using temporary：查询有使用临时表，一般出现于排序，分组和多表 join 的情况，查询效率不高，建议优化</li></ul><blockquote><p>explain 执行结果中的 rows 是什么意思？</p></blockquote><p>前面我已经说了，rows 显示此查询一共扫描了多少行，这个是一个估计值。所以它不准确。那么 rows 究竟是怎么计算出来的呢？为什么不准确？</p><p>rows在官网的文档中有解释：<a href="http://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_rows" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_rows</a>。  </p><pre><code>The rows column indicates the number of rows MySQL believes it must examine to execute the query.</code></pre><p>这个 rows 就是 mysql 认为必须要逐行去检查和判断的记录的条数。举个例子来说，假如有一个语句 select * from t where column_a = 1 and column_b = 2; 全表假设有 100 条记录，column_a 字段有索引（非联合索引），column_b没有索引。column_a = 1 的记录有 20 条， column_a = 1 and column_b = 2 的记录有 5 条。</p><p>那么最终查询结果应该显示 5 条记录。 explain 结果中的 rows 应该是 20。因为这 20 条记录 mysql 引擎必须逐行检查是否满足 where 条件。</p><blockquote><p>EXPLAIN 图解</p></blockquote><p>详细请戳：<a href="https://i6448038.github.io/2019/02/07/explain-image/" target="_blank" rel="noopener">MYSQL执行计划EXPLAIN图解</a></p><blockquote><p>参考资料</p></blockquote><ul><li><a href="http://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_rows" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_rows</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载一篇对MySQL优化神器&lt;code&gt;EXPLAIN&lt;/code&gt;介绍比较详细的一篇文章。原文请直接点击&lt;a href=&quot;https://www.xttblog.com/?p=3524&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL 性能优化神器 Explain 使用教程(https://www.xttblog.com/?p=3524)&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;MySQL&lt;/code&gt; 提供了一个 &lt;code&gt;EXPLAIN&lt;/code&gt; 命令，它可以对 &lt;code&gt;SELECT&lt;/code&gt; 语句进行分析，并输出 &lt;code&gt;SELECT&lt;/code&gt; 执行的详细信息，以供开发人员针对性优化。&lt;br&gt;
    
    </summary>
    
      <category term="数据存储" scheme="https://dongz.me/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="mysql" scheme="https://dongz.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>【转】MYSQL的SQL性能优化总结</title>
    <link href="https://dongz.me/2019/02/24/%E3%80%90%E8%BD%AC%E3%80%91MYSQL%E7%9A%84SQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>https://dongz.me/2019/02/24/【转】MYSQL的SQL性能优化总结/</id>
    <published>2019-02-24T14:38:00.000Z</published>
    <updated>2019-02-24T14:39:08.113Z</updated>
    
    <content type="html"><![CDATA[<p>转载RyuGou的一篇关键MySQL性能优化的文章，原文请戳：<a href="https://i6448038.github.io/2019/02/16/mysql-performance-optimize/" target="_blank" rel="noopener">MYSQL的SQL性能优化总结</a><br>很多时候，我们的程序出现的“性能问题”，其实是我们自己写的那”坨”代码的问题，是自己Coding的问题，是Mysql的DML语句使用的问题。 以下是我总结的关于MySQL DML语句的使用中需要注意的点。</p><a id="more"></a><h2 id="对于select-要时刻保持谨慎的态度"><a href="#对于select-要时刻保持谨慎的态度" class="headerlink" title="对于select *要时刻保持谨慎的态度"></a>对于<code>select *</code>要时刻保持谨慎的态度</h2><p>绝大多数情况，是不需要<code>select *</code>的。一旦使用了这种语句，便会让优化器无法完成索引覆盖扫描这类优化，而且还会增加额外的I/O、内存和CPU的消耗。<br>当然，使用<code>select *</code>也并不是全是坏处，合理的使用<code>select *</code>可以简化开发，提高相同代码的复用性。</p><h2 id="是否扫描的太多额外的记录"><a href="#是否扫描的太多额外的记录" class="headerlink" title="是否扫描的太多额外的记录"></a>是否扫描的太多额外的记录</h2><p>有时候会发现某些查询可能需要读取几千行数据，但是仅返回几条或者很少的结果，可以使用以下方式去优化：</p><ul><li>看看能否改表结构。例如使用汇总表.</li><li>看看获取数据结果的方式是否最优，获取路劲是否已经是最短。  </li><li>使用覆盖索引，把所有需要的列都放到索引中，以减少返回表中对应行中取数据的步骤。  </li></ul><blockquote><p>切分某些SQL语句</p></blockquote><p>传统的互联网系统中，强调网络连接尽量少，数据层尽可能在一次连接中完成尽可能多的工作，防止建立多次链接，但是这种想法对于MySQL并不适用，MySQL从设计上让连接和断开都很轻量，在一般服务器上可以支持每秒超过10万的查询。</p><p>所以对于有些场景下，可以将一个大的查询“分而治之”，切分成小查询，然后再组合起来。例如以下情况：  </p><ul><li>对于全量数据查询变成分页。假如一张表中有数千万条数据，一次<code>select all</code>，肯定是不行的。可以换成一次取一部分，把一次的压力分摊。  </li><li>删除大量旧数据的时候，不要一个大的语句一次性清完，推荐<code>一次删一万条</code>。如果用一个大的语句一次性完成的话，可能需要一次锁住大量数据，占满大量日志事务，让Mysql停在那儿了，为避免这种情况发生，最好一次性删除一万条左右的数据，然后每次删完暂停一会儿再操作，将服务器上的一次性压力分散。</li></ul><h2 id="慎用join操作"><a href="#慎用join操作" class="headerlink" title="慎用join操作"></a>慎用<code>join</code>操作</h2><p>这算是一条禁忌吧，很多公司的互联网产品都杜绝<code>join</code>操作，换成先从一张表中先取出数据id，再从另外一张表中使用<code>where in</code>查询的两次单表查询操作。主要是以下几点原因：  </p><ul><li>让应用的缓存(<code>redis</code>、<code>memcache</code>等)更高效。例如在第一张表中查询出部分<code>id</code>了，如果命中了缓存，就可以省去一条<code>where in</code>语句了。</li><li>更容易应对业务的发展，方便对数据库进行拆分，更容易做到高性能和高扩展。  </li><li>对<code>where in</code>中的id进行升序排序后，查询效率比<code>join</code>的随机关联更高效。  </li><li>减少多余的查询。在应用层中两次查询，意味着对某条记录应用只需要查询一次，而使用<code>join</code>可能需要重复的扫描访问一部分数据。<br>单张表查询可以减少锁的竞争。</li></ul><p>假如非用不可，可以采用以下方式来优化：</p><ul><li>确保<code>ON</code>或者<code>using</code>子句中的列上有索引  </li><li>确保任何的<code>group by</code>和<code>order by</code>中的表达式只涉及到一个表中的列。  </li></ul><h2 id="在性能要求比较高的场景中，杜绝查询中使用临时表"><a href="#在性能要求比较高的场景中，杜绝查询中使用临时表" class="headerlink" title="在性能要求比较高的场景中，杜绝查询中使用临时表"></a>在性能要求比较高的场景中，杜绝查询中使用临时表</h2><p>MySQL的临时表示没有任何索引的，使用临时表一般都意味着性能比较低,因此在对性能要求比较高的场景中，最好不要使用带有临时表的操作：</p><ul><li>未带索引的字段上的<code>group by</code>操作。</li><li><code>UNION</code>查询。  </li><li>查询语句中的子查询。  </li><li>部分<code>order by</code>操作，例如<code>distinct</code>函数和<code>order by</code>一起使用且<code>distinct</code>和<code>order by</code>同一个字段。再例如某些情况下<code>group by</code>和<code>order by</code>字段不同。  </li></ul><p>具体是否用到临时表，可以通过<code>explain</code>来查看，查看<code>Extra</code>列的结果，如果出现<code>Using temporary</code>则需要注意。  </p><h2 id="count-函数优化"><a href="#count-函数优化" class="headerlink" title="count()函数优化"></a><code>count()</code>函数优化</h2><p><code>count()</code>函数有一点需要特别注意：它是不统计值为NULL的字段的！所以：不能指定查询结果的某一列，来统计结果行数。即<code>count(xx column)</code> 不太好。</p><p>如果想要统计结果集，就使用<code>count(*)</code>，性能也会很好。</p><h2 id="尽量不使用子查询"><a href="#尽量不使用子查询" class="headerlink" title="尽量不使用子查询"></a>尽量不使用子查询</h2><p>尽量别使用子查询，尽可能的使用关联来代替</p><h2 id="优化分页limit"><a href="#优化分页limit" class="headerlink" title="优化分页limit"></a>优化分页<code>limit</code></h2><p>通常我们在分页的时候，通常使用的是limit 50, 10这种语句。数据少还不错，但是当数据偏移量非常大的时候，性能就会出现问题，例如select xx,xxx from test_table limit 100000020, 20。扫描了100000020条数据，才返回20条数据。这个时候我们可以用一下两种方式来优化：  </p><p><strong>【利用<code>between and</code>和主键索引】</strong>  </p><p>利用主键自增id，我们如果知道了分页的上边界，以上查询可以改写为：<br><code>select xxx, xxx from test_table where id between xxxxx and xxxx</code>。  </p><p><strong>【利用自增主键索引、<code>order by</code>加<code>limit</code>，不使用<code>offset</code>】</strong>  </p><p><code>limit</code>和<code>offset</code>的问题，其实就是<code>offset</code>的问题，它会导致MySQL扫描大量不需要的行然后再抛弃掉。如果使用某个标签记录上一次所取数据的位置，那么下次就可以直接从书签位置开始扫描，这样就可以避免使用<code>offset</code>。  </p><p>例如以上查询可以改为:</p><p>第一组数据：<code>select xxx, xxxx from test_table order by id desc limit 20;</code></p><p>这样就拿到了本次数据和下次数据的分解id值，则下一页查询就知道可以： <code>select xxx, xxx from test_table where id &lt; &#39;上页id分界值&#39; order by id desc limit 20</code></p><h2 id="熟悉并灵活使用explain"><a href="#熟悉并灵活使用explain" class="headerlink" title="熟悉并灵活使用explain"></a>熟悉并灵活使用<code>explain</code></h2><p>以下是mysql执行查询的整个过程，explain可以查看图中标红部分，</p><p><img src="https://i6448038.github.io/img/mysql_performace/mysql_performace.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载RyuGou的一篇关键MySQL性能优化的文章，原文请戳：&lt;a href=&quot;https://i6448038.github.io/2019/02/16/mysql-performance-optimize/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MYSQL的SQL性能优化总结&lt;/a&gt;&lt;br&gt;很多时候，我们的程序出现的“性能问题”，其实是我们自己写的那”坨”代码的问题，是自己Coding的问题，是Mysql的DML语句使用的问题。 以下是我总结的关于MySQL DML语句的使用中需要注意的点。&lt;/p&gt;
    
    </summary>
    
      <category term="数据存储" scheme="https://dongz.me/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="mysql" scheme="https://dongz.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>redis实现分布式锁</title>
    <link href="https://dongz.me/2019/02/24/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://dongz.me/2019/02/24/redis实现分布式锁/</id>
    <published>2019-02-24T14:34:00.000Z</published>
    <updated>2019-02-24T14:35:24.873Z</updated>
    
    <content type="html"><![CDATA[<p>说的简单些，redis来实现分布式锁的原理就是将程序中一个唯一的key写入redis中，当有其他分布式应用要访问时候此key时，就去redis中读取，读取到了则说明此数据正在被处理，读取不到则说明可以进行处理；<br>但是，想将分布式锁处理的妥当，还真不是一件轻松地事情。</p><p>本文由简单到负责讲解redis分布式锁，最后以通用框架redisson来实战演练。<br><a id="more"></a></p><h2 id="实现进化"><a href="#实现进化" class="headerlink" title="实现进化"></a>实现进化</h2><h3 id="setnx实现"><a href="#setnx实现" class="headerlink" title="setnx实现"></a>setnx实现</h3><blockquote><p>加锁：<code>setnx(key, value)</code>  </p></blockquote><p>key是可能发生竞争的资源唯一标示，例如：<code>my_resource_id</code>资源id作为key。value我们暂时取值为1。当一个线程执行该命令返回1，说明不存在该key，设置成功，表示该线程成功获取了<br>锁；当执行命令返回0时，说明设置失败，已存在该key，表示已经有其它线程获得了该锁。</p><blockquote><p>解锁：<code>del(key)</code> </p></blockquote><p>有加锁就有释放锁，执行<code>del(my_resource_id)</code>删除key，就释放了锁。其它线程就可以继续执行<code>setnx</code>命令来获得锁。</p><blockquote><p>超时锁：expire(key, value)</p></blockquote><p>线程获得锁后，在执行任务的过程中发生宕机，锁没有得到释放。其它线程永远获取不了该锁。因此锁必须设置超时时间，即使宕机，在一定时间后也会自动释放锁。<br><code>setnx</code>不能同时设置超时时间，需要额外的命令<code>expire</code>来设置。</p><p>伪代码：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if(setnx(my_resource_id, 1) == 1) &#123;</span><br><span class="line">    expire(my_resource_id, 30);</span><br><span class="line">    try&#123;</span><br><span class="line">        // handling business;   </span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        del(my_resource_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>存在问题  </p></blockquote><p><code>setnx</code>和<code>expire</code>是独立的命令，放在一起不具有原子性。<br><code>del</code>命令导致误删（下节讲）。</p><h3 id="set实现"><a href="#set实现" class="headerlink" title="set实现"></a>set实现</h3><p>redis2.6.12以上版本提供命令<code>set(key,value,timeout,NX)</code>，key同样可以为资源，在添加key的同时设置有效期，保证了原子性。</p><p>使用该方式虽然保证了原子性，单<code>del</code>操作仍然可能导致误删。 </p><blockquote><p><code>del</code>误删 </p></blockquote><p>比如现在有A和B两个线程，且AB在不同的服务器上，线程A首先获得了锁，并设置了锁的有效期30s。由于A线程在处理业务逻辑的时候超过30s，key过期自动释放锁。这时B线程来获取锁，成功获取锁后处理B线程业务逻辑，<br>在这期间A线程处理完业务执行<code>del</code>命令，导致线程A释放了线程B获取的锁。</p><blockquote><p>lua脚本解决<code>del</code>误删 </p></blockquote><p>可以在<code>del</code>释放锁之前做一个判断，验证当前的锁是不是当前线程加的锁。具体操作可以把当前的线程id当做value，并在删除之前验证key对应的value是不是自己线程的id。</p><p>解锁伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(Thread.getCurrentThreadId.equals(redis.get(my_resource_id)))&#123;</span><br><span class="line">    del(my_resource_id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面避免了误删锁的问题，但是会引入另外一个问题：判断和释放锁是两个独立操作，不是原子性。<br>可以通过lua脚本解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String scriptLua = &quot;</span><br><span class="line">if redis.call(&apos;get&apos;, KEYS[1]) == ARGV[1] </span><br><span class="line">then</span><br><span class="line">   return redis.call(&apos;del&apos;, KEYS[1])</span><br><span class="line">else</span><br><span class="line">   return 0</span><br><span class="line">end</span><br><span class="line">&quot;;</span><br><span class="line">redis.eval(scriptLua, Collections.singletonList(my_resource_id), Collections.singletonList(Thread.getCurrentThreadId))</span><br></pre></td></tr></table></figure><p>使用lua脚本之后保证了判断和释放锁操作的原子性。但A和B访问同一代码块，高并发下对性能仍产生影响。</p><blockquote><p>进一步优化：锁续命</p></blockquote><p>在线程A获得锁以后，开启一个守护线程。守护线程每10s检查一次，若线程A还持有锁且有效期小于12s则将锁的有效期延长10s。若A线程所在服务器宕机，则守护线程也会停止。锁不能继续续命，<br>到达有效期后锁被自动释放。</p><h2 id="redission框架实战"><a href="#redission框架实战" class="headerlink" title="redission框架实战"></a>redission框架实战</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>和上一章原理类似，redission底层也是使用lua脚本保证原子性、<code>watch dog</code>实现自动续命机制。redission为方便使用对相关底层操作做了封装。通过简单<code>lock()</code>和<code>unlock()</code>方法即可<br>实现加锁和解锁功能。redission支持锁的可重入，封装的lua脚本大体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;if(redis.call(&apos;exists&apos;, KEYS[1]) == 0) then </span><br><span class="line">redis.call(&apos;hset&apos;, KEYS[1], ARGV[2], 1);</span><br><span class="line">redis.call(&apos;pexpire&apos;, KEYS[1], ARGV[1]);</span><br><span class="line">return nil;</span><br><span class="line">end;</span><br><span class="line">if(redis.call(&apos;hexists&apos;, KEYS[1], ARGV[2]) == 1) then</span><br><span class="line">redis.call(&apos;hincrby&apos;, KEYS[1], ARGV[2], 1);</span><br><span class="line">redis.call(&apos;pexpire&apos;, KEYS[1], ARGV[1]);</span><br><span class="line">return nil;</span><br><span class="line">end;</span><br><span class="line">return redis.call(&apos;pttl&apos;, KEYS[1]);</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><p>KEYS[1]代表的是你加锁的那个key，比如说：<code>RLock lock = redisson.getLock(&quot;my_resource_id&quot;);</code>这里你自己设置了加锁的那个锁key就是<code>my_resource_id</code>。<br>ARGV[1]代表的就是锁key的默认生存时间，默认30秒。<br>ARGV[2]代表的是加锁的客户端的ID，类似于下面这样：e0308498-6dc0-4a4c-8479-4866922bbea2:1  </p><p>第一段if判断语句，就是用<code>exists key</code>命令判断一下，如果你要加锁的那个锁key不存在的话，你就进行加锁。使用<code>hset key field value</code>设置key对应field（<code>KEYS[1]</code>即客户端的ID）的值为1。<br>并通过<code>pexpire key value</code>设置锁的过期时间为<code>ARGV[1]</code>，单位为毫秒。  </p><p>第二个if判断语句，如果要加锁的key存在就会进入该判断语句。用<code>hexists key field</code>判断锁的拥有者是否是当前客户端，如果是说明客户端再次获取该锁。执行<code>hincrby key field 1</code>对field对应的值加1，<br>记录客户端对锁的获取次数。  </p><p>两个判断语句都没有进的情况说明当前客户端获取的目标锁被其它客户端占有，返回锁的剩余时间。  </p><p>了解更多点这里：<a href="https://github.com/redisson/redisson/wiki" target="_blank" rel="noopener">官方Wiki</a></p><h3 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h3><blockquote><p>pom.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>application.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=redissondemo</span><br><span class="line">server.port=8085</span><br><span class="line">spring.redis.redisson.config=classpath:redisson.yaml</span><br></pre></td></tr></table></figure><blockquote><p>redisson.yaml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">clusterServersConfig:</span><br><span class="line">  idleConnectionTimeout: 10000 #连接空闲超时，单位：毫秒</span><br><span class="line">  connectTimeout: 10000 #连接超时，单位：毫秒</span><br><span class="line">  timeout: 3000 #命令等待超时，单位：毫秒</span><br><span class="line">  retryAttempts: 3  #命令失败重试次数</span><br><span class="line">  retryInterval: 1500  #命令重试发送时间间隔，单位：毫秒</span><br><span class="line">  failedSlaveReconnectionInterval: 3000 #redis slave尝试重新连接的时间间隔，单位：毫秒</span><br><span class="line">  failedSlaveCheckInterval: 60000</span><br><span class="line">  password: ialvin</span><br><span class="line">  subscriptionsPerConnection: 5 #单个连接最大订阅数量</span><br><span class="line">  clientName: null  #客户端名称</span><br><span class="line">  loadBalancer: !&lt;org.redisson.connection.balancer.RoundRobinLoadBalancer&gt; &#123;&#125;  #负载均衡算法类的选择</span><br><span class="line">  subscriptionConnectionMinimumIdleSize: 1 #从节点发布和订阅连接的最小空闲连接数</span><br><span class="line">  subscriptionConnectionPoolSize: 50 #从节点发布和订阅连接池大小</span><br><span class="line">  slaveConnectionMinimumIdleSize: 32 #从节点最小空闲连接数</span><br><span class="line">  slaveConnectionPoolSize: 64 #从节点连接池大小</span><br><span class="line">  masterConnectionMinimumIdleSize: 32 #主节点最小空闲连接数</span><br><span class="line">  masterConnectionPoolSize: 64 #主节点连接池大小</span><br><span class="line">  readMode: &quot;SLAVE&quot; #取操作的负载均衡模式</span><br><span class="line">  subscriptionMode: &quot;SLAVE&quot; # 订阅操作的负载均衡模式</span><br><span class="line">  nodeAddresses: #节点地址</span><br><span class="line">  - &quot;redis://172.16.6.242:6379&quot;</span><br><span class="line">  - &quot;redis://172.16.6.243:6379&quot;</span><br><span class="line">  - &quot;redis://172.16.6.244:6379&quot;</span><br><span class="line">  - &quot;redis://172.16.6.242:6380&quot;</span><br><span class="line">  - &quot;redis://172.16.6.243:6380&quot;</span><br><span class="line">  - &quot;redis://172.16.6.244:6380&quot;</span><br><span class="line">  scanInterval: 1000 #主节点变化扫描间隔时间</span><br><span class="line">  pingConnectionInterval: 0 #定义节点间ping命令发送间隔，0为禁用</span><br><span class="line">  keepAlive: false #启用TCP keepAlive连接</span><br><span class="line">  tcpNoDelay: false #启用TCP tcpNoDelay连接</span><br><span class="line">  sslEnableEndpointIdentification: false #使用ssl安全连接</span><br><span class="line">threads: 0 #线程池数量</span><br><span class="line">nettyThreads: 0 #Netty线程池数量</span><br><span class="line">codec: !&lt;org.redisson.codec.FstCodec&gt; &#123;&#125; #序列化和反序列化编码方式</span><br><span class="line">transportMode: &quot;NIO&quot; #传输模式</span><br></pre></td></tr></table></figure><blockquote><p>TestController.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedissonClient redisson;</span><br><span class="line">    </span><br><span class="line">    @GetMapping(&quot;/lock1&quot;)</span><br><span class="line">    public Response&lt;Boolean&gt; getLock1() &#123;</span><br><span class="line">        RLock lock = redisson.getLock(&quot;mylock&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            lock.lock(20000, TimeUnit.MILLISECONDS);</span><br><span class="line">            log.info(&quot;lock1获得锁mylock, flag:&quot; + lock.isLocked());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            log.info(&quot;lock1释放锁mylock, flag:&quot; + lock.isLocked());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return Response.success(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/lock2&quot;)</span><br><span class="line">    public Response getLock2() &#123;</span><br><span class="line">        RLock lock = redisson.getLock(&quot;mylock&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            lock.lock(15000, TimeUnit.MILLISECONDS);</span><br><span class="line">            log.info(&quot;lock2获得锁mylock, flag:&quot; + lock.isLocked());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            log.info(&quot;lock2释放锁mylock, flag:&quot; + lock.isLocked());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            log.info(&quot;lock2释放锁mylock, flag:&quot; + lock.isLocked());</span><br><span class="line">        &#125;</span><br><span class="line">        return Response.success(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>先调用<code>lock1</code>接口，紧接着（不要超过20s）调用<code>lock2</code>接口，两个接口都获取<code>mylock</code>锁，<code>lock1</code>首先占有锁，<code>lock2</code>等待获取锁。虽然<code>lock1</code>没有显式释放锁，但设置了锁<br>的有效期为20s，超过20s后<code>lock1</code>自动释放锁，此时<code>lock2</code>获取锁并主动释放锁。执行日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-01-24 19:11:38.470  INFO 36698 --- [nio-8085-exec-1] com.alvin.redissiondemo.TestController   : lock1开始获取锁mylock, flag:false</span><br><span class="line">2019-01-24 19:11:38.482  INFO 36698 --- [nio-8085-exec-1] com.alvin.redissiondemo.TestController   : lock1获得锁mylock, flag:true</span><br><span class="line">2019-01-24 19:11:41.456  INFO 36698 --- [nio-8085-exec-2] com.alvin.redissiondemo.TestController   : lock2开始获取锁mylock, flag:true</span><br><span class="line">2019-01-24 19:11:58.494  INFO 36698 --- [nio-8085-exec-2] com.alvin.redissiondemo.TestController   : lock2获得锁mylock, flag:true</span><br><span class="line">2019-01-24 19:11:58.504  INFO 36698 --- [nio-8085-exec-2] com.alvin.redissiondemo.TestController   : lock2释放锁mylock, flag:false</span><br></pre></td></tr></table></figure><p>可以看出<code>lock1</code>获得锁的时间是<code>2019-01-24 19:11:38.482</code>，<code>lock2</code>获得锁的时间为<code>2019-01-24 19:11:58.494</code>之间差了20s就是<code>lock1</code>持有锁的时间和设置的锁有效期一致。<br><code>lock2</code>获得锁就立刻显示释放了锁。</p><blockquote><p>参考：  </p></blockquote><p>[1] <a href="https://juejin.im/post/5bf3f15851882526a643e207" target="_blank" rel="noopener">https://juejin.im/post/5bf3f15851882526a643e207</a><br>[2] <a href="https://mp.weixin.qq.com/s/8fdBKAyHZrfHmSajXT_dnA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/8fdBKAyHZrfHmSajXT_dnA</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说的简单些，redis来实现分布式锁的原理就是将程序中一个唯一的key写入redis中，当有其他分布式应用要访问时候此key时，就去redis中读取，读取到了则说明此数据正在被处理，读取不到则说明可以进行处理；&lt;br&gt;但是，想将分布式锁处理的妥当，还真不是一件轻松地事情。&lt;/p&gt;
&lt;p&gt;本文由简单到负责讲解redis分布式锁，最后以通用框架redisson来实战演练。&lt;br&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://dongz.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式锁" scheme="https://dongz.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper实现分布式锁</title>
    <link href="https://dongz.me/2019/01/21/zookeeper%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://dongz.me/2019/01/21/zookeeper实现分布式锁/</id>
    <published>2019-01-21T15:32:00.000Z</published>
    <updated>2019-01-21T15:35:52.198Z</updated>
    
    <content type="html"><![CDATA[<p><code>zookeeper</code>能够保障分布式场景下数据的一致性、有序性、原子性及可靠性，它的所有写入动作会在主节点持久化，并在集群过半数节点写入成功才会返回；<br>它也能够支持节点的崩溃恢复以及客户端的最终一致性视图。对于分布式锁场景来说，数据一致性的保障、以及锁服务的容灾保障至关重要。</p><p>本章主要是curator框架结合zookeeper实现分布式锁。<br><a id="more"></a></p><h2 id="zookeeper分布式锁实现原理"><a href="#zookeeper分布式锁实现原理" class="headerlink" title="zookeeper分布式锁实现原理"></a>zookeeper分布式锁实现原理</h2><p>原理还是看下大佬们的总结吧：  </p><blockquote><p>主要：  </p></blockquote><p><a href="https://juejin.im/post/5c01532ef265da61362232ed" target="_blank" rel="noopener">七张图彻底讲清楚ZooKeeper分布式锁的实现原理</a>  </p><blockquote><p>其它：   </p></blockquote><p><a href="https://draveness.me/zookeeper-chubby" target="_blank" rel="noopener">详解分布式协调服务 ZooKeeper</a><br><a href="https://blog.csdn.net/csdnnews/article/details/86248155" target="_blank" rel="noopener">漫画：什么是 ZooKeeper</a><br><a href="https://mp.weixin.qq.com/s/u8QDlrDj3Rl1YjY4TyKMCA" target="_blank" rel="noopener">漫画：如何用Zookeeper实现分布式锁</a>  </p><h2 id="使用curator框架实战"><a href="#使用curator框架实战" class="headerlink" title="使用curator框架实战"></a>使用curator框架实战</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>SpringBoot Version：2.1.2.RELEASE</p><p>JDK：1.8</p><h3 id="摘要代码"><a href="#摘要代码" class="headerlink" title="摘要代码"></a>摘要代码</h3><blockquote><p>pom.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- zookeeper &amp; curator --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.4.10&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.12.0&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.12.0&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>application.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br><span class="line">spring.application.name=curator-use</span><br><span class="line"></span><br><span class="line">#重试次数</span><br><span class="line">curator.retryCount=3</span><br><span class="line">#重试间隔时间ms!</span><br><span class="line">curator.elapsedTimeMs=5000</span><br><span class="line"># zookeeper 地址</span><br><span class="line">curator.connectString=172.16.6.242:2181,172.16.6.243:2181,172.16.6.244:2181</span><br><span class="line"># session超时时间ms!</span><br><span class="line">curator.sessionTimeoutMs=60000</span><br><span class="line"># 连接超时时间ms!</span><br><span class="line">curator.connectionTimeoutMs=5000</span><br></pre></td></tr></table></figure><blockquote><p>属性类CuratorAttribute.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;curator&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class CuratorAttribute &#123;</span><br><span class="line">    private int retryCount;</span><br><span class="line"></span><br><span class="line">    private int elapsedTimeMs;</span><br><span class="line"></span><br><span class="line">    private String connectString;</span><br><span class="line"></span><br><span class="line">    private int sessionTimeoutMs;</span><br><span class="line"></span><br><span class="line">    private int connectionTimeoutMs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置类ZkConfiguration.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ZkConfiguration &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CuratorAttribute curatorAttribute;</span><br><span class="line"></span><br><span class="line">    @Bean(initMethod = &quot;start&quot;)</span><br><span class="line">    public CuratorFramework curatorFramework() &#123;</span><br><span class="line">        return CuratorFrameworkFactory.newClient(</span><br><span class="line">                curatorAttribute.getConnectString(),</span><br><span class="line">                curatorAttribute.getSessionTimeoutMs(),</span><br><span class="line">                curatorAttribute.getConnectionTimeoutMs(),</span><br><span class="line">                new RetryNTimes(curatorAttribute.getRetryCount(),curatorAttribute.getElapsedTimeMs()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分布式锁关节实现类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">public class LockByZookeeper implements InitializingBean &#123;</span><br><span class="line">    private final static String ROOT_PATH_LOCK = &quot;rootlock&quot;;</span><br><span class="line">    private CountDownLatch countDownLatch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CuratorFramework curatorFramework;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取分布式锁</span><br><span class="line">     */</span><br><span class="line">    public void acquire(String path) &#123;</span><br><span class="line">        String keyPath = &quot;/&quot; + ROOT_PATH_LOCK + &quot;/&quot; + path;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                curatorFramework</span><br><span class="line">                        .create()</span><br><span class="line">                        .creatingParentsIfNeeded()</span><br><span class="line">                        .withMode(CreateMode.EPHEMERAL)</span><br><span class="line">                        .withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE)</span><br><span class="line">                        .forPath(keyPath);</span><br><span class="line">                log.info(&quot;success to acquire lock for path:&#123;&#125;&quot;, keyPath);</span><br><span class="line">                break;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.info(&quot;failed to acquire lock for path:&#123;&#125;&quot;, keyPath);</span><br><span class="line">                log.info(&quot;while try again .......&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (countDownLatch.getCount() &lt;= 0) &#123;</span><br><span class="line">                        countDownLatch = new CountDownLatch(1);</span><br><span class="line">                    &#125;</span><br><span class="line">                    countDownLatch.await();</span><br><span class="line">                &#125; catch (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 释放分布式锁</span><br><span class="line">     */</span><br><span class="line">    public boolean release(String path) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String keyPath = &quot;/&quot; + ROOT_PATH_LOCK + &quot;/&quot; + path;</span><br><span class="line">            if (curatorFramework.checkExists().forPath(keyPath) != null) &#123;</span><br><span class="line">                curatorFramework.delete().forPath(keyPath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;failed to release lock&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建 watcher 事件</span><br><span class="line">     */</span><br><span class="line">    private void addWatcher(String path) throws Exception &#123;</span><br><span class="line">        String keyPath;</span><br><span class="line">        if (path.equals(ROOT_PATH_LOCK)) &#123;</span><br><span class="line">            keyPath = &quot;/&quot; + path;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            keyPath = &quot;/&quot; + ROOT_PATH_LOCK + &quot;/&quot; + path;</span><br><span class="line">        &#125;</span><br><span class="line">        final PathChildrenCache cache = new PathChildrenCache(curatorFramework, keyPath, false);</span><br><span class="line">        cache.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT);</span><br><span class="line">        cache.getListenable().addListener((client, event) -&gt; &#123;</span><br><span class="line">            if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)) &#123;</span><br><span class="line">                String oldPath = event.getData().getPath();</span><br><span class="line">                log.info(&quot;上一个节点 &quot;+ oldPath + &quot; 已经被断开&quot;);</span><br><span class="line">                if (oldPath.contains(path)) &#123;</span><br><span class="line">                    //释放计数器，让当前的请求获取锁</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //创建父节点，并创建永久节点</span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet() &#123;</span><br><span class="line">        curatorFramework = curatorFramework.usingNamespace(&quot;lock-namespace&quot;);</span><br><span class="line">        String path = &quot;/&quot; + ROOT_PATH_LOCK;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (curatorFramework.checkExists().forPath(path) == null) &#123;</span><br><span class="line">                curatorFramework.create()</span><br><span class="line">                        .creatingParentsIfNeeded()</span><br><span class="line">                        .withMode(CreateMode.PERSISTENT)</span><br><span class="line">                        .withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE)</span><br><span class="line">                        .forPath(path);</span><br><span class="line">            &#125;</span><br><span class="line">            addWatcher(ROOT_PATH_LOCK);</span><br><span class="line">            log.info(&quot;root path 的 watcher 事件创建成功&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;connect zookeeper fail，please check the log &gt;&gt; &#123;&#125;&quot;, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>控制层类LockController.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class LockController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private LockByZookeeper lockByZookeeper;</span><br><span class="line"></span><br><span class="line">    private final static String PATH = &quot;resource_lock&quot;;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/lock1&quot;)</span><br><span class="line">    public Response&lt;Boolean&gt; getLock1() &#123;</span><br><span class="line">        Boolean flag;</span><br><span class="line">        lockByZookeeper.acquire(PATH);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(20000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            flag = lockByZookeeper.release(PATH);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = lockByZookeeper.release(PATH);</span><br><span class="line">        return Response.success(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/lock2&quot;)</span><br><span class="line">    public Response getLock2() &#123;</span><br><span class="line">        Boolean flag;</span><br><span class="line">        lockByZookeeper.acquire(PATH);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(15000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            flag = lockByZookeeper.release(PATH);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = lockByZookeeper.release(PATH);</span><br><span class="line">        return Response.success(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>/lock1</code> 和 <code>/lock2</code>两个接口获取同一个锁<code>resource_lock</code>。</p><blockquote><p>测试 </p></blockquote><p>先调用<code>lock1</code>接口，紧接着（不要超过20s）调用<code>lock2</code>接口。这时就是出现锁竞争，<code>lock1</code>占有锁，<code>lock2</code>等待获取锁。<code>lock1</code>释放锁之后通知<code>lock2</code>，<code>lock2</code>重新获取锁。执行日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2019-01-21 15:23:32.506  INFO 40866 --- [nio-8081-exec-1] com.alvin.curatoruse.LockByZookeeper     : success to acquire lock for path:/rootlock/resource_lock</span><br><span class="line">2019-01-21 15:23:36.078  INFO 40866 --- [nio-8081-exec-2] com.alvin.curatoruse.LockByZookeeper     : failed to acquire lock for path:/rootlock/resource_lock</span><br><span class="line">2019-01-21 15:23:36.078  INFO 40866 --- [nio-8081-exec-2] com.alvin.curatoruse.LockByZookeeper     : while try again .......</span><br><span class="line">2019-01-21 15:23:52.527  INFO 40866 --- [ChildrenCache-0] com.alvin.curatoruse.LockByZookeeper     : 上一个节点 /rootlock/resource_lock 已经被断开</span><br><span class="line">2019-01-21 15:23:52.534  INFO 40866 --- [nio-8081-exec-2] com.alvin.curatoruse.LockByZookeeper     : success to acquire lock for path:/rootlock/resource_lock</span><br><span class="line">2019-01-21 15:24:07.547  INFO 40866 --- [ChildrenCache-0] com.alvin.curatoruse.LockByZookeeper     : 上一个节点 /rootlock/resource_lock 已经被断开</span><br></pre></td></tr></table></figure><p><code>nio-8081-exec-1</code>为<code>lock1</code>线程，<code>nio-8081-exec-2</code>为<code>lock2</code>线程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;zookeeper&lt;/code&gt;能够保障分布式场景下数据的一致性、有序性、原子性及可靠性，它的所有写入动作会在主节点持久化，并在集群过半数节点写入成功才会返回；&lt;br&gt;它也能够支持节点的崩溃恢复以及客户端的最终一致性视图。对于分布式锁场景来说，数据一致性的保障、以及锁服务的容灾保障至关重要。&lt;/p&gt;
&lt;p&gt;本章主要是curator框架结合zookeeper实现分布式锁。&lt;br&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://dongz.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式锁" scheme="https://dongz.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper集群搭建</title>
    <link href="https://dongz.me/2019/01/20/zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>https://dongz.me/2019/01/20/zookeeper集群搭建/</id>
    <published>2019-01-20T14:25:00.000Z</published>
    <updated>2019-01-20T14:29:38.030Z</updated>
    
    <content type="html"><![CDATA[<p>zookeeper是一个高效的分布式协调服务，可以提供配置信息管理、命名、分布式同步、集群管理、数据库切换等服务。它不适合用来存储大量信息，可以用来存储一些配置、发布与订阅等少量信息。<br>hadoop、storm、消息中间件、rpc服务框架、分布式数据库同步系统，这些都是zookeeper的应用场景。</p><p>zookeeper集群中节点个数一般为奇数个（&gt;=3），若集群中主节点挂掉，剩余节点个数在半数以上时，就可以推举新的主节点，继续对外提供服务。</p><a id="more"></a><h2 id="为啥子2n-1"><a href="#为啥子2n-1" class="headerlink" title="为啥子2n+1"></a>为啥子2n+1</h2><p>zookeeper集群正常提供服务的前提是：有过半的服务可用。所以服务节点数必须为为<code>2n+1</code>，就不会发生服务器恰好一半可用一半不可用的情况。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 ~]# cd /opt</span><br><span class="line">[root@server1 opt]# wget http://apache.01link.hk/zookeeper/stable/zookeeper-3.4.12.tar.gz</span><br><span class="line"></span><br><span class="line"># server2、server3同上，也可利用scp从server1复制</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 opt]# tar -zxvf zookeeper-3.4.12.tar.gz </span><br><span class="line">[root@server3 opt]# mv zookeeper-3.4.12 zookeeper</span><br><span class="line"></span><br><span class="line"># server2、server3同上</span><br></pre></td></tr></table></figure><h3 id="依赖条件准备"><a href="#依赖条件准备" class="headerlink" title="依赖条件准备"></a>依赖条件准备</h3><blockquote><p>检查jdk是否安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 opt]# java -version </span><br><span class="line">openjdk version &quot;1.8.0_121&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_121-b13)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.121-b13, mixed mode)</span><br><span class="line"></span><br><span class="line"># server2、server3同上</span><br></pre></td></tr></table></figure><blockquote><p>防火墙检查</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 opt]# firewall-cmd --state  # 检查防火墙是否开启</span><br><span class="line">not running</span><br></pre></td></tr></table></figure><p>若开启，开放端口：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 opt]# firewall-cmd --zone=public --add-port=2181/tcp --permanent</span><br><span class="line">[root@server1 opt]# firewall-cmd --zone=public --add-port=2888/tcp --permanent</span><br><span class="line">[root@server1 opt]# firewall-cmd --zone=public --add-port=3888/tcp --permanent</span><br><span class="line">[root@server1 opt]# firewall-cmd --complete-reload</span><br><span class="line"></span><br><span class="line"># server2、server3同上</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 opt]# cd zookeeper/conf</span><br><span class="line">[root@server1 conf]# mv zoo_sample.cfg zoo.cfg</span><br><span class="line">[root@server1 conf]# vi zoo.cfg</span><br><span class="line">dataDir=/opt/zookeeper/data  # 数据存储位置，提前创建好;</span><br><span class="line">server.1=172.16.6.242:2888:3888   # 2888为心跳端口，3888为选举端口</span><br><span class="line">server.2=172.16.6.243:2888:3888</span><br><span class="line">server.3=172.16.6.244:2888:3888</span><br><span class="line"></span><br><span class="line"># server2、server3同上</span><br></pre></td></tr></table></figure><h3 id="创建myid文件"><a href="#创建myid文件" class="headerlink" title="创建myid文件"></a>创建myid文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 conf]# cd /opt/zookeeper/data</span><br><span class="line">[root@server1 data]# echo 1 &gt; myid</span><br><span class="line"></span><br><span class="line"># server2</span><br><span class="line">[root@server2 data]# echo 2 &gt; myid</span><br><span class="line"></span><br><span class="line"># server3</span><br><span class="line">[root@server3 data]# echo 3 &gt; myid</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 data]# cd /opt/zookeeper/bin/</span><br><span class="line">[root@server1 bin]# ./zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line"></span><br><span class="line"># 查看集群状态</span><br><span class="line">[root@server1 bin]# ./zkServer.sh status # 集群未就绪</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Error contacting service. It is probably not running.</span><br><span class="line"></span><br><span class="line"># server2、server3节点依次启动后 从server1查看</span><br><span class="line">[root@server1 bin]# ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower  # 从节点</span><br><span class="line"></span><br><span class="line"># 从server2查看</span><br><span class="line">[root@server2 bin]# ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader  # 自动被选举为主节点</span><br><span class="line"></span><br><span class="line"># 从server3查看</span><br><span class="line">[root@server3 bin]# ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower  # 从节点</span><br></pre></td></tr></table></figure><blockquote><p>至此搭建结束，整个过程比较简单，自动实现选举功能。</p></blockquote><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/ZooKeeper.md" target="_blank" rel="noopener">详细了解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zookeeper是一个高效的分布式协调服务，可以提供配置信息管理、命名、分布式同步、集群管理、数据库切换等服务。它不适合用来存储大量信息，可以用来存储一些配置、发布与订阅等少量信息。&lt;br&gt;hadoop、storm、消息中间件、rpc服务框架、分布式数据库同步系统，这些都是zookeeper的应用场景。&lt;/p&gt;
&lt;p&gt;zookeeper集群中节点个数一般为奇数个（&amp;gt;=3），若集群中主节点挂掉，剩余节点个数在半数以上时，就可以推举新的主节点，继续对外提供服务。&lt;/p&gt;
    
    </summary>
    
      <category term="数据存储" scheme="https://dongz.me/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="zookeeper" scheme="https://dongz.me/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>mysql实现分布式锁</title>
    <link href="https://dongz.me/2019/01/20/mysql%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://dongz.me/2019/01/20/mysql实现分布式锁/</id>
    <published>2019-01-20T14:22:00.000Z</published>
    <updated>2019-01-20T14:24:48.293Z</updated>
    
    <content type="html"><![CDATA[<p>为了保证一个方法或者属性在高并发情况下的同一时间只能被同一个线程执行，在传统单机应用单机部署的情况下，可以使用java并发锁如ReentrantLock或Synchronized。<br>但是随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效。<br>为了解决这个问题，就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题。本文主要讲讲通过数据库如何实现分布式锁。<br><a id="more"></a></p><h2 id="分布式锁应具备条件"><a href="#分布式锁应具备条件" class="headerlink" title="分布式锁应具备条件"></a>分布式锁应具备条件</h2><ul><li>在分布式系统环境下，一个方法在同一时间只能被一个机器的的一个线程执行；  </li><li>高可用的获取锁与释放锁；  </li><li>高性能的获取锁与释放锁；  </li><li>具备可重入特性；  </li><li>具备锁失效机制，防止死锁；  </li><li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。  </li></ul><h2 id="基于数据库的实现"><a href="#基于数据库的实现" class="headerlink" title="基于数据库的实现"></a>基于数据库的实现</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>在数据库中创建一个表，表中包含资源字段，并在资源字段上创建唯一索引，想要使用某个资源，就使用这个资源向表中插入数据，成功插入则获取锁，执行完成后删除对应的行数据释放锁。  </p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="建锁表"><a href="#建锁表" class="headerlink" title="建锁表"></a>建锁表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists tb_lock;</span><br><span class="line">create table tb_lock(</span><br><span class="line">id int primary key auto_increment comment &apos;主键&apos;,</span><br><span class="line">source_id varchar(64) not null comment &apos;资源id&apos;,</span><br><span class="line">owner_id varchar(64) not null comment &apos;资源占有者id&apos;,</span><br><span class="line">state int default 0 comment &apos;线程重入次数&apos;,</span><br><span class="line">dead_time long comment &apos;失效时间&apos;,</span><br><span class="line">update_time long not null comment &apos;更新时间&apos;,</span><br><span class="line">description varchar(100) comment &apos;说明&apos;,</span><br><span class="line">unique key `uidx_source_id` (`source_id`) using btree</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT=&apos;分布式锁表&apos;;</span><br></pre></td></tr></table></figure><p>id：自增可传递空值。<br>source_id：资源可能是方法、对象等，若为方法可以设置为方法名；若为对象可以设置为对象id或对象其它唯一标示。<br>owner_id：可根据规则 <code>ip+threadId</code>即服务器ip和线程id生成唯一标示。<br>dead_time：根据 <code>System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(lockTimeOut)</code>计算得出。<br>update_time：记录更新时间为 <code>System.nanoTime()</code>。<br>state：设置为1，表示第一次进入锁。<br>description：锁描述。  </p><h4 id="锁定资源"><a href="#锁定资源" class="headerlink" title="锁定资源"></a>锁定资源</h4><p>设计方法 <code>boolean tryLock(String sourceId, long lockTimeOut)</code>，实现对资源sourceId的锁定，lockTimeOut为锁保持的最长有效期，可为空，为空代表永久持有锁直到主动释放锁。<br>方法实现具体步骤：  </p><ol><li>根据资源id查询是否资源被占用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_lock where source_id = &lt;id&gt;</span><br></pre></td></tr></table></figure><ol><li>若返回结果为空，说明资源未被占用，当前线程执行插入资源占用数据。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 插入数据库资源行记录sql</span><br><span class="line">insert into tb_lock</span><br><span class="line">(`id`,</span><br><span class="line">`source_id`,</span><br><span class="line">`owner_id`,</span><br><span class="line">`state`,</span><br><span class="line">`dead_time`,</span><br><span class="line">`update_time`,</span><br><span class="line">`description`)</span><br><span class="line">VALUES</span><br><span class="line">(&lt;&#123;id: &#125;&gt;,</span><br><span class="line">&lt;&#123;source_id: &#125;&gt;,</span><br><span class="line">&lt;&#123;owner_id: &#125;&gt;,</span><br><span class="line">&lt;&#123;state: 0&#125;&gt;,</span><br><span class="line">&lt;&#123;dead_time: &#125;&gt;,</span><br><span class="line">&lt;&#123;update_time: &#125;&gt;,</span><br><span class="line">&lt;&#123;description: &#125;&gt;);</span><br></pre></td></tr></table></figure><ol><li>若返回记录，说明资源已被占用。  </li></ol><p>查看记录<code>owner_id</code>，若相等说明属于锁重入，<code>state</code>加1操作：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_lock set state = state + 1 where id = &lt;id&gt;</span><br></pre></td></tr></table></figure><p>若不相等说明资源已被其他线程占用，返回false。  </p><blockquote><p>注意：以上操作要放在同一事务中处理，利用数据库行锁中的排他锁，保证原子性。  </p></blockquote><h4 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h4><p>设计方法<code>boolean unLock(String sourceId)</code>，释放资源<code>sourceId</code>。  </p><p>方法实现具体步骤：  </p><p>判断state值是否为0，若为执行：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from tb_lock where id = &lt;id&gt;</span><br></pre></td></tr></table></figure><p>若不为0，执行：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_lock set state = state - 1 where id = &lt;id&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：以上操作同样要放到事务中保证原子性。 </p></blockquote><h3 id="缺点及不足"><a href="#缺点及不足" class="headerlink" title="缺点及不足"></a>缺点及不足</h3><ol><li><p>实例中锁属于非阻塞的，即获取锁失败就立刻返回。可以通过循环，指定循环次数或时间进行重试操作，直到成功。  </p></li><li><p>数据库存在单点问题，可以搭建主从结构优化。</p></li><li><p>连接池容易被打满、事务超时、行锁升级表锁等问题难以解决。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了保证一个方法或者属性在高并发情况下的同一时间只能被同一个线程执行，在传统单机应用单机部署的情况下，可以使用java并发锁如ReentrantLock或Synchronized。&lt;br&gt;但是随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效。&lt;br&gt;为了解决这个问题，就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题。本文主要讲讲通过数据库如何实现分布式锁。&lt;br&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://dongz.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式锁" scheme="https://dongz.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Redis集群</title>
    <link href="https://dongz.me/2019/01/20/Redis%E9%9B%86%E7%BE%A4/"/>
    <id>https://dongz.me/2019/01/20/Redis集群/</id>
    <published>2019-01-20T14:20:00.000Z</published>
    <updated>2019-01-20T14:31:59.456Z</updated>
    
    <content type="html"><![CDATA[<p>主从复制和哨兵模式，存在诸多问题，最主要的问题是存储能力受单机限制，写操作不能实现负载均衡。<br>Redis3.0开始引入分布式存储方案，集群。集群由多个节点组成，节点分为主节点和从节点。主节点负载读写请求和集群信息的维护，从节点只进行主节点数据和信息的复制。集群的作用如下：</p><ul><li><strong>数据分区：</strong> 数据分区(或称数据分片)是集群最核心的功能。集群将数据分散到多个节点，一方面突破了Redis单机内存大小的限制，存储容量大大增加；<br>另一方面每个主节点都可以对外提供读服务和写服务，大大提高了集群的响应能力。</li><li><strong>高可用：</strong> 集群支持主从复制和主节点的自动故障转移（与哨兵类似）；当任一节点发生故障时，集群仍然可以对外提供服务。  </li></ul><p>本文集群模式，包含3个主节点、3个从节点。<br><a id="more"></a></p><h2 id="Redis集群实战"><a href="#Redis集群实战" class="headerlink" title="Redis集群实战"></a>Redis集群实战</h2><h3 id="纯手工搭建"><a href="#纯手工搭建" class="headerlink" title="纯手工搭建"></a>纯手工搭建</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>为方便理解，通过<code>hostname</code>命令将三个服务器重新命名。<br>172.16.6.242命名为server1；<br>172.16.6.243命名为server2；<br>172.16.6.244命名为server3；  </p><p>server1、server2、server3每台服务器启动两个Redis实例节点，6379端口对应实例为主节点，6380对应实例为从节点。6个节点构成3主3从的集群模式。  </p><h4 id="配置启动节点"><a href="#配置启动节点" class="headerlink" title="配置启动节点"></a>配置启动节点</h4><blockquote><p>在server1服务器上（server2和server3操作相同）：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"># 创建redis目录，用于存储rdb文件和相关配置文件</span><br><span class="line">[root@server1 test1]# mkdir /redis</span><br><span class="line"></span><br><span class="line"># 创建主节点对应配置文件</span><br><span class="line">[root@server1 test1]# vim /redis/redis-6379.conf</span><br><span class="line">bind 0.0.0.0  </span><br><span class="line">port 6379</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file /redis/nodes-6379.conf</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize yes</span><br><span class="line">logfile /var/log/redis/redis-6379.log</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">dir /var/lib/redis-6379</span><br><span class="line">requirepass ialvin</span><br><span class="line">masterauth ialvin</span><br><span class="line">dbfilename dump-6379.rdb</span><br><span class="line"></span><br><span class="line"># 创建从节点对应配置文件</span><br><span class="line">[root@server1 test1]# vim /redis/redis-6380.conf</span><br><span class="line">bind 0.0.0.0  </span><br><span class="line">port 6380</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file /redis/nodes-6380.conf</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize yes</span><br><span class="line">logfile /var/log/redis/redis-6380.log</span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line">dir /redis/redis-6380</span><br><span class="line">requirepass ialvin</span><br><span class="line">masterauth ialvin</span><br><span class="line">dbfilename dump-6380.rdb</span><br><span class="line"></span><br><span class="line"># 创建主节点启动文件，并启动主节点</span><br><span class="line">[root@server1 ~]# cp -rp /usr/lib/systemd/system/redis.service /usr/lib/systemd/system/redis-6379.service</span><br><span class="line">[root@server1 ~]# vim /usr/lib/systemd/system/redis-6379.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis persistent key-value database</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/redis-server /redis/redis-6379.conf --supervised systemd</span><br><span class="line">ExecStop=/usr/libexec/redis-shutdown</span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">[root@server1 ~]# systemctl start redis-6379.service  # 启动主节点实例</span><br><span class="line">[root@server1 ~]# ps -ef|grep 6379  # 查看主节点已启动</span><br><span class="line">root       606 31798  0 23:22 pts/1    00:00:00 grep --color=auto 6379</span><br><span class="line">redis    30078     1  0 1月11 ?       00:05:21 /usr/bin/redis-server 0.0.0.0:6379 [cluster]</span><br><span class="line"></span><br><span class="line"># 创建从节点启动文件，并启动从节点</span><br><span class="line">[root@server1 ~]# cp -rp /usr/lib/systemd/system/redis.service /usr/lib/systemd/system/redis-6380.service</span><br><span class="line">[root@server1 ~]# vim /usr/lib/systemd/system/redis-6380.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis persistent key-value database</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/redis-server /redis/redis-6380.conf --supervised systemd</span><br><span class="line">ExecStop=/usr/libexec/redis-shutdown</span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">[root@server1 ~]# ps -ef|grep 6380   # 启动从节点实例</span><br><span class="line">root       805 31798  0 23:25 pts/1    00:00:00 grep --color=auto 6380</span><br><span class="line">redis    30100     1  0 1月11 ?       00:05:23 /usr/bin/redis-server 0.0.0.0:6380 [cluster]</span><br></pre></td></tr></table></figure><blockquote><p>注意问题：  </p></blockquote><ol><li><p>Can’t chdir to ‘/redis/redis-6379’: No such file or directory<br>在配置文件中配置的dir，要手动创建<code>mkdir -p /redis/redis-6379</code>，用来存放数据库备份文件和临时文件。  </p></li><li><p>Server can’t set maximum open files to 10032 because of OS error: Operation not permitted.<br>意思进程当前需要打开10032个文件描述符，而当前系统进程可打开的最大文件描述符低于该值。通过<code>ulimit -n 65535</code>修改系统限制。  </p></li><li><p>Can’t open nodes-6379.conf in order to acquire a lock: Permission denied<br>没有nodes-6379.conf配置文件的读写权限，因为以redis用户启动服务，需要将权限授权给redis用户，这里通过更为文件所属用户和组<code>chown -R redis:redis /redis</code>。  </p></li><li><p>执行cluster meet ip port 进行节点握手后，cluster nodes只显示部分节点信息。<br>集群配置文件/redis/nodes-6379.conf，记录了集群中各个节点信息。每个节点的唯一id记录在该文件中，造成该问题的原因是复制了集群配置文件，导致不同节点有相同的id。<br>处理方式：关闭服务，将集群配置文件清空，重新启动服务。  </p></li></ol><h4 id="节点之间进行握手"><a href="#节点之间进行握手" class="headerlink" title="节点之间进行握手"></a>节点之间进行握手</h4><p>节点启动以后是相互独立的，并不知道其他节点存在；需要进行节点握手，将独立的节点组成一个网络。节点握手使用cluster meet {ip} {port}命令实现，以一个节点如server1的6379节点为中心，分别和另外5个节点<br>进行握手，其它节点之间会自动进行握手。如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 在server1 6379实例上操作，分别和另外5个节点握手</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 172.16.6.242 6380</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 172.16.6.243 6379</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 172.16.6.243 6380</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 172.16.6.244 6379</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 172.16.6.244 6380</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes # 查看节点之间是否连接成功，connected表示连接成功</span><br><span class="line">24476a1e819364f13a8691eb1709aac5218c3d03 172.16.6.242:6380@16380 master - 0 1547189697000 1 connected</span><br><span class="line">8f4a0dbf53a4652779cdd0694fa7eead9b1b7cf8 172.16.6.244:6380@16380 master - 0 1547189698000 5 connected</span><br><span class="line">9c87a28d355b26615510f4c93fd928f221bcb5d2 172.16.6.244:6379@16379 master - 0 1547189699536 4 connected 10923-16383</span><br><span class="line">0f3567e025db95bc81608da49059d86a79fdf760 172.16.6.243:6380@16380 master - 0 1547189697530 2 connected</span><br><span class="line">b97e7281211f66a84b812a5257b223badee006ba 172.16.6.242:6379@16379 myself,master - 0 1547189693000 0 connected 0-5461</span><br><span class="line">805acf3e1f0e8cd771750739bc3d493d77136500 172.16.6.243:6379@16379 master - 0 1547189698533 3 connected 5462-10922</span><br></pre></td></tr></table></figure><h4 id="分配槽"><a href="#分配槽" class="headerlink" title="分配槽"></a>分配槽</h4><p>集群有16384个槽，槽是数据管理和迁移的基本单位。当数据库中的16384个槽都分配了节点时，集群处于上线状态（ok）；如果有任意一个槽没有分配节点，则集群处于下线状态（fail）。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在server1 6379实例上操作，查看集群状态和已分配槽的数量。</span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:0</span><br></pre></td></tr></table></figure><p>分配槽使用cluster addslots命令，执行下面的命令将槽（编号0-16383）全部分配完毕：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 在server1 6379实例上操作，分配槽</span><br><span class="line">[root@server1 ~]# redis-cli -p 6379  cluster addslots &#123;0..5461&#125;</span><br><span class="line">[root@server1 ~]# redis-cli -h 172.16.6.243  -p 6379 -a ialvin  cluster addslots &#123;5462..10922&#125;</span><br><span class="line">[root@server1 ~]# redis-cli -h 172.16.6.244  -p 6379 -a ialvin  cluster addslots &#123;10923..16383&#125;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; cluster info  # 查看集群状态和槽分配状态</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br></pre></td></tr></table></figure><h4 id="建立主从关系"><a href="#建立主从关系" class="headerlink" title="建立主从关系"></a>建立主从关系</h4><p>集群中指定主从关系不再使用slaveof命令，而是使用cluster replicate命令；参数使用节点id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 在server1 6379实例上操作，建立主从关系，cluster replicate后参数为主节点id</span><br><span class="line">[root@server1 ~]# redis-cli -p 6380 -a ialvin  cluster replicate b97e7281211f66a84b812a5257b223badee006ba</span><br><span class="line">[root@server1 ~]# redis-cli -h 172.16.6.243 -p 6380 -a ialvin  cluster replicate 805acf3e1f0e8cd771750739bc3d493d77136500</span><br><span class="line">[root@server1 ~]# redis-cli -h 172.16.6.244 -p 6380 -a ialvin  cluster replicate 9c87a28d355b26615510f4c93fd928f221bcb5d2</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes # 查看此时集群状态，可以看到三主三从节点组成</span><br><span class="line">24476a1e819364f13a8691eb1709aac5218c3d03 172.16.6.242:6380@16380 slave b97e7281211f66a84b812a5257b223badee006ba 0 1547190153747 1 connected</span><br><span class="line">8f4a0dbf53a4652779cdd0694fa7eead9b1b7cf8 172.16.6.244:6380@16380 slave 9c87a28d355b26615510f4c93fd928f221bcb5d2 0 1547190153000 5 connected</span><br><span class="line">9c87a28d355b26615510f4c93fd928f221bcb5d2 172.16.6.244:6379@16379 master - 0 1547190155750 4 connected 10923-16383</span><br><span class="line">0f3567e025db95bc81608da49059d86a79fdf760 172.16.6.243:6380@16380 slave 805acf3e1f0e8cd771750739bc3d493d77136500 0 1547190153000 3 connected</span><br><span class="line">b97e7281211f66a84b812a5257b223badee006ba 172.16.6.242:6379@16379 myself,master - 0 1547190155000 0 connected 0-5461</span><br><span class="line">805acf3e1f0e8cd771750739bc3d493d77136500 172.16.6.243:6379@16379 master - 0 1547190154749 3 connected 5462-10922</span><br></pre></td></tr></table></figure><h3 id="集群命令搭建"><a href="#集群命令搭建" class="headerlink" title="集群命令搭建"></a>集群命令搭建</h3><p>使用redis-cli –cluster create <ip:port> <ip:port> <ip:port> … 创建自动创建集群。  </ip:port></ip:port></ip:port></p><h4 id="启动节点，同手工方式"><a href="#启动节点，同手工方式" class="headerlink" title="启动节点，同手工方式"></a>启动节点，同手工方式</h4><h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><p>集群搭建过程如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 命令自动创建集群</span><br><span class="line">[root@server1 ~]# redis-cli --cluster create 172.16.6.242:6379 172.16.6.243:6379 172.16.6.244:6379 172.16.6.242:6380 172.16.6.243:6380 172.16.6.244:6380 --cluster-replicas 1</span><br></pre></td></tr></table></figure><p>其中：–cluster-replicas=1表示每个主节点有1个从节点；后面的多个{ip:port}表示节点地址，前面的做主节点，后面的做从节点。使用集群命令搭建集群时，要求节点不能包含任何槽和数据。  </p><h3 id="集群方案建议"><a href="#集群方案建议" class="headerlink" title="集群方案建议"></a>集群方案建议</h3><ol><li><p>高可用要求<br>根据故障转移的原理，至少需要3个主节点才能完成故障转移，且3个主节点不应在同一台物理机上；每个主节点至少需要1个从节点，且主从节点不应在一台物理机上；因此高可用集群至少包含6个节点。  </p></li><li><p>数据量和访问量<br>估算应用需要的数据量和总访问量(考虑业务发展，留有冗余)，结合每个主节点的容量和能承受的访问量(可以通过benchmark得到较准确估计)，计算需要的主节点数量。  </p></li><li><p>节点数量限制<br>Redis官方给出的节点数量限制为1000，主要是考虑节点间通信带来的消耗。在实际应用中应尽量避免大集群；如果节点数量不足以满足应用对Redis数据量和访问量的要求，可以考虑：(1)业务分割，大集群分为多个小集群；(2)减少不必要的数据；(3)调整数据过期策略等。  </p></li><li><p>适度冗余<br>Redis可以在不影响集群服务的情况下增加节点，因此节点数量适当冗余即可，不用太大。  </p></li></ol><h2 id="集群基本原理"><a href="#集群基本原理" class="headerlink" title="集群基本原理"></a>集群基本原理</h2><p>集群最核心的功能是数据分区，因此首先介绍数据的分区规则；然后介绍集群实现的细节：通信机制和数据结构；最后以cluster meet(节点握手)、cluster addslots(槽分配)为例，说明节点是如何利用上述数据结构和通信机制实现集群命令的。  </p><h3 id="数据分区方案"><a href="#数据分区方案" class="headerlink" title="数据分区方案"></a>数据分区方案</h3><p>数据分区有顺序分区、哈希分区等，其中哈希分区由于其天然的随机性，使用广泛。<br>哈希分区的基本思路是：对数据的特征值（如key）进行哈希，然后根据哈希值决定数据落在哪个节点。常见的哈希分区包括：哈希取余分区、一致性哈希分区、带虚拟节点的一致性哈希分区等。<br>衡量数据分区方法好坏的标准有很多，其中比较重要的两个因素是(1)数据分布是否均匀(2)增加或删减节点对数据分布的影响。由于哈希的随机性，哈希分区基本可以保证数据分布均匀；因此在比较哈希分区方案时，重点要看增减节点对数据分布的影响。  </p><h4 id="哈希取余分区"><a href="#哈希取余分区" class="headerlink" title="哈希取余分区"></a>哈希取余分区</h4><p>哈希取余分区思路非常简单：计算key的hash值，然后对节点数量进行取余，从而决定数据映射到哪个节点上。该方案最大的问题是，当新增或删减节点时，节点数量发生变化，系统中所有的数据都需要重新计算映射关系，引发大规模数据迁移。  </p><h4 id="一致性哈希分区"><a href="#一致性哈希分区" class="headerlink" title="一致性哈希分区"></a>一致性哈希分区</h4><p>一致性哈希算法将整个哈希值空间组织成一个虚拟的圆环，如下图所示，范围为0-2^32-1；对于每个数据，根据key计算hash值，确定数据在环上的位置，然后从此位置沿环顺时针行走，找到的第一台服务器就是其应该映射到的服务器。<br><img src="https://images2015.cnblogs.com/blog/498077/201608/498077-20160822172408386-366341651.png" alt=""> </p><p>与哈希取余分区相比，一致性哈希分区将增减节点的影响限制在相邻节点。以上图为例，如果在node1和node2之间增加node5，则只有node2中的一部分数据会迁移到node5；如果去掉node2，则原node2中的数据只会迁移到node4中，只有node4会受影响。<br>一致性哈希分区的主要问题在于，当节点数量较少时，增加或删减节点，对单个节点的影响可能很大，造成数据的严重不平衡。还是以上图为例，如果去掉node2，node4中的数据由总数据的1/4左右变为1/2左右，与其他节点相比负载过高。  </p><h4 id="带虚拟节点的一致性哈希分区"><a href="#带虚拟节点的一致性哈希分区" class="headerlink" title="带虚拟节点的一致性哈希分区"></a>带虚拟节点的一致性哈希分区</h4><p>该方案在一致性哈希分区的基础上，引入了虚拟节点的概念。Redis集群使用的便是该方案，其中的虚拟节点称为槽（slot）。槽是介于数据和实际节点之间的虚拟概念；每个实际节点包含一定数量的槽，每个槽包含哈希值在一定范围内的数据。引入槽以后，数据的映射关系由数据hash-&gt;实际节点，变成了数据hash-&gt;槽-&gt;实际节点。  </p><p>在使用了槽的一致性哈希分区中，槽是数据管理和迁移的基本单位。槽解耦了数据和实际节点之间的关系，增加或删除节点对系统的影响很小。仍以上图为例，系统中有4个实际节点，假设为其分配16个槽(0-15)； 槽0-3位于node1，4-7位于node2，以此类推。如果此时删除node2，只需要将槽4-7重新分配即可，例如槽4-5分配给node1，槽6分配给node3，槽7分配给node4；可以看出删除node2后，数据在其他节点的分布仍然较为均衡。  </p><p>槽的数量一般远小于2^32，远大于实际节点的数量；在Redis集群中，槽的数量为16384。  </p><p><img src="https://img2018.cnblogs.com/blog/1174710/201810/1174710-20181025213453407-302249562.png" alt=""> </p><p>1.Redis对数据的特征值（一般是key）计算哈希值，使用的算法是CRC16。  </p><p>2.根据哈希值，计算数据属于哪个槽。  </p><p>3.根据槽与节点的映射关系，计算数据属于哪个节点。  </p><h3 id="节点通信机制"><a href="#节点通信机制" class="headerlink" title="节点通信机制"></a>节点通信机制</h3><h4 id="两个端口"><a href="#两个端口" class="headerlink" title="两个端口"></a>两个端口</h4><p>在集群中，没有数据节点与非数据节点之分：所有的节点都存储数据，也都参与集群状态的维护。为此，集群中的每个节点，都提供了两个TCP端口：  </p><p><strong>普通端口：</strong> 即我们在前面指定的端口(6379等)。普通端口主要用于为客户端提供服务（与单机节点类似）；但在节点间数据迁移时也会使用。  </p><p><strong>集群端口：</strong> 端口号是普通端口+10000（10000是固定值，无法改变），如6379节点的集群端口为16379。集群端口只用于节点之间的通信，如搭建集群、增减节点、故障转移等操作时节点间的通信；不要使用客户端连接集群接口。为了保证集群可以正常工作，在配置防火墙时，要同时开启普通端口和集群端口。  </p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>节点间通信，按照通信协议可以分为几种类型：单对单、广播、Gossip协议等。重点是广播和Gossip的对比。  </p><p>广播是指向集群内所有节点发送消息；优点是集群的收敛速度快(集群收敛是指集群内所有节点获得的集群信息是一致的)，缺点是每条消息都要发送给所有节点，CPU、带宽等消耗较大。  </p><p>Gossip协议的特点是：在节点数量有限的网络中，每个节点都“随机”的与部分节点通信（并不是真正的随机，而是根据特定的规则选择通信的节点），经过一番杂乱无章的通信，每个节点的状态很快会达到一致。Gossip协议的优点有负载(比广播)低、去中心化、容错性高(因为通信有冗余)等；缺点主要是集群的收敛速度慢。  </p><p>集群中的节点采用固定频率（每秒10次）的定时任务进行通信相关的工作：判断是否需要发送消息及消息类型、确定接收节点、发送消息等。如果集群状态发生了变化，如增减节点、槽状态变更，通过节点间的通信，所有节点会很快得知整个集群的状态，使集群收敛。</p><p>节点间发送的消息主要分为5种：meet消息、ping消息、pong消息、fail消息、publish消息。不同的消息类型，通信协议、发送的频率和时机、接收节点的选择等是不同的。</p><p><strong>MEET消息：</strong> 在节点握手阶段，当节点收到客户端的CLUSTER MEET命令时，会向新加入的节点发送MEET消息，请求新节点加入到当前集群；新节点收到MEET消息后会回复一个PONG消息。<br><strong>PING消息：</strong> 集群里每个节点每秒钟会选择部分节点发送PING消息，接收者收到消息后会回复一个PONG消息。PING消息的内容是自身节点和部分其他节点的状态信息；作用是彼此交换信息，以及检测节点是否在线。PING消息使用Gossip协议发送，接收节点的选择兼顾了收敛速度和带宽成本，具体规则如下：(1)随机找5个节点，在其中选择最久没有通信的1个节点(2)扫描节点列表，选择最近一次收到PONG消息时间大于cluster_node_timeout/2的所有节点，防止这些节点长时间未更新。<br><strong>PONG消息：</strong> PONG消息封装了自身状态数据。可以分为两种：第一种是在接到MEET/PING消息后回复的PONG消息；第二种是指节点向集群广播PONG消息，这样其他节点可以获知该节点的最新信息，例如故障恢复后新的主节点会广播PONG消息。<br><strong>FAIL消息：</strong> 当一个主节点判断另一个主节点进入FAIL状态时，会向集群广播这一FAIL消息；接收节点会将这一FAIL消息保存起来，便于后续的判断。<br><strong>PUBLISH消息：</strong> 节点收到PUBLISH命令后，会先执行该命令，然后向集群广播这一消息，接收节点也会执行该PUBLISH命令。  </p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>节点需要专门的数据结构来存储集群的状态。所谓集群的状态，是一个比较大的概念，包括：集群是否处于上线状态、集群中有哪些节点、节点是否可达、节点的主从状态、槽的分布……</p><p>节点为了存储集群状态而提供的数据结构中，最关键的是clusterNode和clusterState结构：前者记录了一个节点的状态，后者记录了集群作为一个整体的状态。  </p><h3 id="集群命令实现"><a href="#集群命令实现" class="headerlink" title="集群命令实现"></a>集群命令实现</h3><p>这一部分将以cluster meet(节点握手)、cluster addslots(槽分配)为例，说明节点是如何利用上述数据结构和通信机制实现集群命令的。</p><p>cluster meet<br>假设要向A节点发送cluster meet命令，将B节点加入到A所在的集群，则A节点收到命令后，执行的操作如下：</p><p>1)  A为B创建一个clusterNode结构，并将其添加到clusterState的nodes字典中</p><p>2)  A向B发送MEET消息</p><p>3)  B收到MEET消息后，会为A创建一个clusterNode结构，并将其添加到clusterState的nodes字典中</p><p>4)  B回复A一个PONG消息</p><p>5)  A收到B的PONG消息后，便知道B已经成功接收自己的MEET消息</p><p>6)  然后，A向B返回一个PING消息</p><p>7)  B收到A的PING消息后，便知道A已经成功接收自己的PONG消息，握手完成</p><p>8)  之后，A通过Gossip协议将B的信息广播给集群内其他节点，其他节点也会与B握手；一段时间后，集群收敛，B成为集群内的一个普通节点</p><p>通过上述过程可以发现，集群中两个节点的握手过程与TCP类似，都是三次握手：A向B发送MEET；B向A发送PONG；A向B发送PING。</p><p>cluster addslots<br>集群中槽的分配信息，存储在clusterNode的slots数组和clusterState的slots数组中，两个数组的结构前面已做介绍；二者的区别在于：前者存储的是该节点中分配了哪些槽，后者存储的是集群中所有槽分别分布在哪个节点。</p><p>cluster addslots命令接收一个槽或多个槽作为参数，例如在A节点上执行cluster addslots {0..10}命令，是将编号为0-10的槽分配给A节点，具体执行过程如下：</p><p>1)  遍历输入槽，检查它们是否都没有分配，如果有一个槽已分配，命令执行失败；方法是检查输入槽在clusterState.slots[]中对应的值是否为NULL。</p><p>2)  遍历输入槽，将其分配给节点A；方法是修改clusterNode.slots[]中对应的比特为1，以及clusterState.slots[]中对应的指针指向A节点</p><p>3)  A节点执行完成后，通过节点通信机制通知其他节点，所有节点都会知道0-10的槽分配给了A节点</p><h2 id="客户端访问集群"><a href="#客户端访问集群" class="headerlink" title="客户端访问集群"></a>客户端访问集群</h2><p>在集群中，数据分布在不同的节点中，客户端通过某节点访问数据时，数据可能不在该节点中；下面介绍集群是如何处理这个问题的。</p><ol><li>redis-cli<br>当节点收到redis-cli发来的命令(如set/get)时，过程如下：</li></ol><p>（1）计算key属于哪个槽：CRC16(key) &amp; 16383</p><p>集群提供的cluster keyslot命令也是使用上述公式实现</p><p>（2）判断key所在的槽是否在当前节点：假设key位于第i个槽，clusterState.slots[i]则指向了槽所在的节点，如果clusterState.slots[i]==clusterState.myself，说明槽在当前节点，可以直接在当前节点执行命令；否则，说明槽不在当前节点，则查询槽所在节点的地址(clusterState.slots[i].ip/port)，并将其包装到MOVED错误中返回给redis-cli。</p><p>（3）redis-cli收到MOVED错误后，根据返回的ip和port重新发送请求。</p><p>redis-cli通过-c指定了集群模式，如果没有指定，redis-cli无法处理MOVED错误。</p><ol><li>Smart客户端<br>redis-cli这一类客户端称为Dummy客户端，因为它们在执行命令前不知道数据在哪个节点，需要借助MOVED错误重新定向。与Dummy客户端相对应的是Smart客户端。</li></ol><p>Smart客户端（以Java的JedisCluster为例）的基本原理：</p><p>（1）JedisCluster初始化时，在内部维护slot-&gt;node的缓存，方法是连接任一节点，执行cluster slots命令，该命令返回如下所示：</p><p>（2）此外，JedisCluster为每个节点创建连接池(即JedisPool)。</p><p>（3）当执行命令时，JedisCluster根据key-&gt;slot-&gt;node选择需要连接的节点，发送命令。如果成功，则命令执行完毕。如果执行失败，则会随机选择其他节点进行重试，并在出现MOVED错误时，使用cluster slots重新同步slot-&gt;node的映射关系。</p><p>注意事项如下：</p><p>（1）JedisCluster中已经包含所有节点的连接池，因此JedisCluster要使用单例。</p><p>（2）客户端维护了slot-&gt;node映射关系以及为每个节点创建了连接池，当节点数量较多时，应注意客户端内存资源和连接资源的消耗。</p><p>（3）Jedis较新版本针对JedisCluster做了一些性能方面的优化，如cluster slots缓存更新和锁阻塞等方面的优化，应尽量使用2.8.2及以上版本的Jedis。</p><p><strong>参考：</strong>    </p><ol><li><a href="https://www.cnblogs.com/kismetv/p/9853040.html" target="_blank" rel="noopener">深入学习Redis（5）：集群</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主从复制和哨兵模式，存在诸多问题，最主要的问题是存储能力受单机限制，写操作不能实现负载均衡。&lt;br&gt;Redis3.0开始引入分布式存储方案，集群。集群由多个节点组成，节点分为主节点和从节点。主节点负载读写请求和集群信息的维护，从节点只进行主节点数据和信息的复制。集群的作用如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据分区：&lt;/strong&gt; 数据分区(或称数据分片)是集群最核心的功能。集群将数据分散到多个节点，一方面突破了Redis单机内存大小的限制，存储容量大大增加；&lt;br&gt;另一方面每个主节点都可以对外提供读服务和写服务，大大提高了集群的响应能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高可用：&lt;/strong&gt; 集群支持主从复制和主节点的自动故障转移（与哨兵类似）；当任一节点发生故障时，集群仍然可以对外提供服务。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文集群模式，包含3个主节点、3个从节点。&lt;br&gt;
    
    </summary>
    
      <category term="数据存储" scheme="https://dongz.me/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="redis" scheme="https://dongz.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis哨兵</title>
    <link href="https://dongz.me/2019/01/06/Redis%E5%93%A8%E5%85%B5/"/>
    <id>https://dongz.me/2019/01/06/Redis哨兵/</id>
    <published>2019-01-06T04:24:00.000Z</published>
    <updated>2019-01-06T04:25:27.032Z</updated>
    
    <content type="html"><![CDATA[<p>哨兵在复制的基础上，哨兵实现了自动化的故障恢复。缺陷：写操作无法负载均衡；存储能力受到单机的限制。<br>Redis2.8引入哨兵，主要功能如下：</p><ul><li><strong>监控（Monitoring：</strong> 哨兵会不断地检查主节点和从节点是否运作正常。</li><li><strong>自动故障转移（Automatic failover）：</strong> 当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。</li><li><strong>配置提供者（Configuration provider）：</strong> 客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。</li><li><strong>通知（Notification）：</strong> 哨兵可以将故障转移的结果发送给客户端。</li></ul><p>本文哨兵系统，包含1个主节点、2个从节点和3个哨兵节点。<br><a id="more"></a></p><h2 id="高可用哨兵实战"><a href="#高可用哨兵实战" class="headerlink" title="高可用哨兵实战"></a>高可用哨兵实战</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>搭建主从复制集群，参考《主从复制实战》，包括master(172.16.6.242)、slave1(172.16.6.243)、slave2(172.16.6.244)。在此基础上，三个哨兵节点分散部署在每个主从复制Redis节点上。</p><h3 id="配置启动哨兵"><a href="#配置启动哨兵" class="headerlink" title="配置启动哨兵"></a>配置启动哨兵</h3><h4 id="主节点master上配置并启动哨兵节点"><a href="#主节点master上配置并启动哨兵节点" class="headerlink" title="主节点master上配置并启动哨兵节点"></a>主节点master上配置并启动哨兵节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /etc/redis-sentinel.conf</span><br><span class="line">port 26379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">dir /tmp</span><br><span class="line">sentinel monitor mymaster 172.16.6.242 6379 2</span><br><span class="line">sentinel auth-pass mymaster ialvin</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line">logfile &quot;/var/log/redis/sentinel.log&quot;</span><br><span class="line"></span><br><span class="line">[root@master ~]# systemctl start redis-sentinel.service</span><br><span class="line">[root@master ~]# ss -ntl # 端口26379已开启</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port               Peer Address:Port</span><br><span class="line">LISTEN     0      128          *:26379                    *:*</span><br><span class="line">LISTEN     0      128          *:6379                     *:*</span><br><span class="line">LISTEN     0      128          *:111                      *:*</span><br></pre></td></tr></table></figure><h4 id="从节点slave1和slave2配置并启动哨兵"><a href="#从节点slave1和slave2配置并启动哨兵" class="headerlink" title="从节点slave1和slave2配置并启动哨兵"></a>从节点slave1和slave2配置并启动哨兵</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# scp /etc/redis-sentinel.conf 172.16.6.243:/etc/     # 复制主节点哨兵配置文件到slave1；</span><br><span class="line">[root@master ~]# scp /etc/redis-sentinel.conf 172.16.6.243:/etc/     # 复制主节点哨兵配置文件到slave2；</span><br><span class="line"></span><br><span class="line"># 启动slave1上哨兵服务</span><br><span class="line">[root@slave1 ~]# systemctl start redis-sentinel.service</span><br><span class="line">[root@slave1 ~]# ss -ntl</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port               Peer Address:Port</span><br><span class="line">LISTEN     0      128    172.16.6.243:7946                     *:*</span><br><span class="line">LISTEN     0      128          *:27018                    *:*</span><br><span class="line">LISTEN     0      128          *:26379                    *:*</span><br><span class="line">LISTEN     0      128          *:6379                     *:*</span><br><span class="line"></span><br><span class="line"># 启动slave2上哨兵服务</span><br><span class="line">[root@slave2 ~]# systemctl start redis-sentinel.service</span><br><span class="line">[root@slave2 ~]# ss -ntl</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port               Peer Address:Port</span><br><span class="line">LISTEN     0      128          *:26379                    *:*</span><br><span class="line">LISTEN     0      128          *:6379                     *:*</span><br><span class="line">LISTEN     0      128          *:111                      *:*</span><br></pre></td></tr></table></figure><h4 id="从master节点上的哨兵查看相关信息"><a href="#从master节点上的哨兵查看相关信息" class="headerlink" title="从master节点上的哨兵查看相关信息"></a>从master节点上的哨兵查看相关信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# redis-cli -h 172.16.6.242 -p 26379      # 连接redis-sentinel，指定端口26379；</span><br><span class="line">172.16.6.242:26379&gt; sentinel masters                     # 通过哨兵查看主节点信息；</span><br><span class="line">1)  1) &quot;name&quot;</span><br><span class="line">    2) &quot;mymaster&quot;</span><br><span class="line">    3) &quot;ip&quot;</span><br><span class="line">    4) &quot;172.16.6.242&quot;</span><br><span class="line">    5) &quot;port&quot;</span><br><span class="line">    6) &quot;6379&quot;</span><br><span class="line">    7) &quot;runid&quot;</span><br><span class="line">    8) &quot;099f4715cadd5e7b204d510eda834d9aa584eb6f&quot;</span><br><span class="line">    9) &quot;flags&quot;</span><br><span class="line">   10) &quot;master&quot;</span><br><span class="line">   11) &quot;link-pending-commands&quot;</span><br><span class="line">   12) &quot;0&quot;</span><br><span class="line">   13) &quot;link-refcount&quot;</span><br><span class="line">   14) &quot;1&quot;</span><br><span class="line">   15) &quot;last-ping-sent&quot;</span><br><span class="line">   16) &quot;0&quot;</span><br><span class="line">   17) &quot;last-ok-ping-reply&quot;</span><br><span class="line">   18) &quot;304&quot;</span><br><span class="line">   19) &quot;last-ping-reply&quot;</span><br><span class="line">   20) &quot;304&quot;</span><br><span class="line">   21) &quot;down-after-milliseconds&quot;</span><br><span class="line">   22) &quot;30000&quot;</span><br><span class="line">   23) &quot;info-refresh&quot;</span><br><span class="line">   24) &quot;1610&quot;</span><br><span class="line">   25) &quot;role-reported&quot;</span><br><span class="line">   26) &quot;master&quot;</span><br><span class="line">   27) &quot;role-reported-time&quot;</span><br><span class="line">   28) &quot;59678249&quot;</span><br><span class="line">   29) &quot;config-epoch&quot;</span><br><span class="line">   30) &quot;0&quot;</span><br><span class="line">   31) &quot;num-slaves&quot;</span><br><span class="line">   32) &quot;2&quot;</span><br><span class="line">   33) &quot;num-other-sentinels&quot;</span><br><span class="line">   34) &quot;0&quot;</span><br><span class="line">   35) &quot;quorum&quot;</span><br><span class="line">   36) &quot;2&quot;</span><br><span class="line">   37) &quot;failover-timeout&quot;</span><br><span class="line">   38) &quot;180000&quot;</span><br><span class="line">   39) &quot;parallel-syncs&quot;</span><br><span class="line">   40) &quot;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">172.16.6.242:26379&gt; sentinel slaves mymaster                     # 通过哨兵查看主节点名称为mymaster对应的从节点；</span><br><span class="line">1)  1) &quot;name&quot;</span><br><span class="line">    2) &quot;172.16.6.244:6379&quot;</span><br><span class="line">    3) &quot;ip&quot;</span><br><span class="line">    4) &quot;172.16.6.244&quot;</span><br><span class="line">    5) &quot;port&quot;</span><br><span class="line">    6) &quot;6379&quot;</span><br><span class="line">    7) &quot;runid&quot;</span><br><span class="line">    8) &quot;5c34cdad4c9c8623bf5ebdf388d01d410e464fdc&quot;</span><br><span class="line">    9) &quot;flags&quot;</span><br><span class="line">   10) &quot;slave&quot;</span><br><span class="line">   11) &quot;link-pending-commands&quot;</span><br><span class="line">   12) &quot;0&quot;</span><br><span class="line">   13) &quot;link-refcount&quot;</span><br><span class="line">   14) &quot;1&quot;</span><br><span class="line">   15) &quot;last-ping-sent&quot;</span><br><span class="line">   16) &quot;0&quot;</span><br><span class="line">   17) &quot;last-ok-ping-reply&quot;</span><br><span class="line">   18) &quot;858&quot;</span><br><span class="line">   19) &quot;last-ping-reply&quot;</span><br><span class="line">   20) &quot;858&quot;</span><br><span class="line">   21) &quot;down-after-milliseconds&quot;</span><br><span class="line">   22) &quot;30000&quot;</span><br><span class="line">   23) &quot;info-refresh&quot;</span><br><span class="line">   24) &quot;1610&quot;</span><br><span class="line">   25) &quot;role-reported&quot;</span><br><span class="line">   26) &quot;slave&quot;</span><br><span class="line">   27) &quot;role-reported-time&quot;</span><br><span class="line">   28) &quot;59960910&quot;</span><br><span class="line">   29) &quot;master-link-down-time&quot;</span><br><span class="line">   30) &quot;0&quot;</span><br><span class="line">   31) &quot;master-link-status&quot;</span><br><span class="line">   32) &quot;ok&quot;</span><br><span class="line">   33) &quot;master-host&quot;</span><br><span class="line">   34) &quot;172.16.6.242&quot;</span><br><span class="line">   35) &quot;master-port&quot;</span><br><span class="line">   36) &quot;6379&quot;</span><br><span class="line">   37) &quot;slave-priority&quot;</span><br><span class="line">   38) &quot;100&quot;</span><br><span class="line">   39) &quot;slave-repl-offset&quot;</span><br><span class="line">   40) &quot;13193196&quot;</span><br><span class="line">2)  1) &quot;name&quot;</span><br><span class="line">    2) &quot;172.16.6.243:6379&quot;</span><br><span class="line">    3) &quot;ip&quot;</span><br><span class="line">    4) &quot;172.16.6.243&quot;</span><br><span class="line">    5) &quot;port&quot;</span><br><span class="line">    6) &quot;6379&quot;</span><br><span class="line">    7) &quot;runid&quot;</span><br><span class="line">    8) &quot;154d2e317cff5e0b1672f2b4f385b481ce560b55&quot;</span><br><span class="line">    9) &quot;flags&quot;</span><br><span class="line">   10) &quot;slave&quot;</span><br><span class="line">   11) &quot;link-pending-commands&quot;</span><br><span class="line">   12) &quot;0&quot;</span><br><span class="line">   13) &quot;link-refcount&quot;</span><br><span class="line">   14) &quot;1&quot;</span><br><span class="line">   15) &quot;last-ping-sent&quot;</span><br><span class="line">   16) &quot;0&quot;</span><br><span class="line">   17) &quot;last-ok-ping-reply&quot;</span><br><span class="line">   18) &quot;858&quot;</span><br><span class="line">   19) &quot;last-ping-reply&quot;</span><br><span class="line">   20) &quot;858&quot;</span><br><span class="line">   21) &quot;down-after-milliseconds&quot;</span><br><span class="line">   22) &quot;30000&quot;</span><br><span class="line">   23) &quot;info-refresh&quot;</span><br><span class="line">   24) &quot;1610&quot;</span><br><span class="line">   25) &quot;role-reported&quot;</span><br><span class="line">   26) &quot;slave&quot;</span><br><span class="line">   27) &quot;role-reported-time&quot;</span><br><span class="line">   28) &quot;59960909&quot;</span><br><span class="line">   29) &quot;master-link-down-time&quot;</span><br><span class="line">   30) &quot;0&quot;</span><br><span class="line">   31) &quot;master-link-status&quot;</span><br><span class="line">   32) &quot;ok&quot;</span><br><span class="line">   33) &quot;master-host&quot;</span><br><span class="line">   34) &quot;172.16.6.242&quot;</span><br><span class="line">   35) &quot;master-port&quot;</span><br><span class="line">   36) &quot;6379&quot;</span><br><span class="line">   37) &quot;slave-priority&quot;</span><br><span class="line">   38) &quot;100&quot;</span><br><span class="line">   39) &quot;slave-repl-offset&quot;</span><br><span class="line">   40) &quot;13193196&quot;</span><br></pre></td></tr></table></figure><h3 id="主节点故障转移测试"><a href="#主节点故障转移测试" class="headerlink" title="主节点故障转移测试"></a>主节点故障转移测试</h3><h4 id="模拟主节点master宕机"><a href="#模拟主节点master宕机" class="headerlink" title="模拟主节点master宕机"></a>模拟主节点master宕机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl stop redis.service        # 停止主节点redis服务；</span><br><span class="line">[root@master ~]# ss -ntl        # 6379端口已关闭；</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port               Peer Address:Port</span><br><span class="line">LISTEN     0      128          *:26379                    *:*</span><br><span class="line">LISTEN     0      128          *:111                      *:*</span><br><span class="line">LISTEN     0      128          *:22                       *:*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master ~]# redis-cli -h 172.16.6.242 -p 26379  # 连接redis-sentinel，指定端口26379；</span><br><span class="line">172.16.6.242:26379&gt; sentinel masters             # 查看当前主节点相关信息；</span><br><span class="line">1)  1) &quot;name&quot;</span><br><span class="line">    2) &quot;mymaster&quot;</span><br><span class="line">    3) &quot;ip&quot;</span><br><span class="line">    4) &quot;172.16.6.243&quot;</span><br><span class="line">    5) &quot;port&quot;</span><br><span class="line">    6) &quot;6379&quot;</span><br><span class="line">    7) &quot;runid&quot;</span><br><span class="line">    8) &quot;154d2e317cff5e0b1672f2b4f385b481ce560b55&quot;</span><br><span class="line">    9) &quot;flags&quot;</span><br><span class="line">   10) &quot;master&quot;</span><br><span class="line">   11) &quot;link-pending-commands&quot;</span><br><span class="line">   12) &quot;0&quot;</span><br><span class="line">   13) &quot;link-refcount&quot;</span><br><span class="line">   14) &quot;1&quot;</span><br><span class="line">   15) &quot;last-ping-sent&quot;</span><br><span class="line">   16) &quot;0&quot;</span><br><span class="line">   17) &quot;last-ok-ping-reply&quot;</span><br><span class="line">   18) &quot;296&quot;</span><br><span class="line">   19) &quot;last-ping-reply&quot;</span><br><span class="line">   20) &quot;296&quot;</span><br><span class="line">   21) &quot;down-after-milliseconds&quot;</span><br><span class="line">   22) &quot;30000&quot;</span><br><span class="line">   23) &quot;info-refresh&quot;</span><br><span class="line">   24) &quot;357&quot;</span><br><span class="line">   25) &quot;role-reported&quot;</span><br><span class="line">   26) &quot;master&quot;</span><br><span class="line">   27) &quot;role-reported-time&quot;</span><br><span class="line">   28) &quot;71092&quot;</span><br><span class="line">   29) &quot;config-epoch&quot;</span><br><span class="line">   30) &quot;1&quot;</span><br><span class="line">   31) &quot;num-slaves&quot;</span><br><span class="line">   32) &quot;2&quot;</span><br><span class="line">   33) &quot;num-other-sentinels&quot;</span><br><span class="line">   34) &quot;2&quot;</span><br><span class="line">   35) &quot;quorum&quot;</span><br><span class="line">   36) &quot;2&quot;</span><br><span class="line">   37) &quot;failover-timeout&quot;</span><br><span class="line">   38) &quot;180000&quot;</span><br><span class="line">   39) &quot;parallel-syncs&quot;</span><br><span class="line">   40) &quot;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">172.16.6.242:26379&gt; sentinel slaves mymaster        # 查看当前从节点，可以看到原来的主节点242变成了从节点；</span><br><span class="line">1)  1) &quot;name&quot;</span><br><span class="line">    2) &quot;172.16.6.242:6379&quot;</span><br><span class="line">    3) &quot;ip&quot;</span><br><span class="line">    4) &quot;172.16.6.242&quot;</span><br><span class="line">    5) &quot;port&quot;</span><br><span class="line">    6) &quot;6379&quot;</span><br><span class="line">    7) &quot;runid&quot;</span><br><span class="line">    8) &quot;&quot;</span><br><span class="line">    9) &quot;flags&quot;</span><br><span class="line">   10) &quot;s_down,slave,disconnected&quot;</span><br><span class="line">   11) &quot;link-pending-commands&quot;</span><br><span class="line">   12) &quot;3&quot;</span><br><span class="line">   13) &quot;link-refcount&quot;</span><br><span class="line">   14) &quot;1&quot;</span><br><span class="line">   15) &quot;last-ping-sent&quot;</span><br><span class="line">   16) &quot;141427&quot;</span><br><span class="line">   17) &quot;last-ok-ping-reply&quot;</span><br><span class="line">   18) &quot;141427&quot;</span><br><span class="line">   19) &quot;last-ping-reply&quot;</span><br><span class="line">   20) &quot;141427&quot;</span><br><span class="line">   21) &quot;s-down-time&quot;</span><br><span class="line">   22) &quot;111358&quot;</span><br><span class="line">   23) &quot;down-after-milliseconds&quot;</span><br><span class="line">   24) &quot;30000&quot;</span><br><span class="line">   25) &quot;info-refresh&quot;</span><br><span class="line">   26) &quot;1546599601970&quot;</span><br><span class="line">   27) &quot;role-reported&quot;</span><br><span class="line">   28) &quot;slave&quot;</span><br><span class="line">   29) &quot;role-reported-time&quot;</span><br><span class="line">   30) &quot;141427&quot;</span><br><span class="line">   31) &quot;master-link-down-time&quot;</span><br><span class="line">   32) &quot;0&quot;</span><br><span class="line">   33) &quot;master-link-status&quot;</span><br><span class="line">   34) &quot;err&quot;</span><br><span class="line">   35) &quot;master-host&quot;</span><br><span class="line">   36) &quot;?&quot;</span><br><span class="line">   37) &quot;master-port&quot;</span><br><span class="line">   38) &quot;0&quot;</span><br><span class="line">   39) &quot;slave-priority&quot;</span><br><span class="line">   40) &quot;100&quot;</span><br><span class="line">   41) &quot;slave-repl-offset&quot;</span><br><span class="line">   42) &quot;0&quot;</span><br><span class="line">2)  1) &quot;name&quot;</span><br><span class="line">    2) &quot;172.16.6.244:6379&quot;</span><br><span class="line">    3) &quot;ip&quot;</span><br><span class="line">    4) &quot;172.16.6.244&quot;</span><br><span class="line">    5) &quot;port&quot;</span><br><span class="line">    6) &quot;6379&quot;</span><br><span class="line">    7) &quot;runid&quot;</span><br><span class="line">    8) &quot;5c34cdad4c9c8623bf5ebdf388d01d410e464fdc&quot;</span><br><span class="line">    9) &quot;flags&quot;</span><br><span class="line">   10) &quot;slave&quot;</span><br><span class="line">   11) &quot;link-pending-commands&quot;</span><br><span class="line">   12) &quot;0&quot;</span><br><span class="line">   13) &quot;link-refcount&quot;</span><br><span class="line">   14) &quot;1&quot;</span><br><span class="line">   15) &quot;last-ping-sent&quot;</span><br><span class="line">   16) &quot;0&quot;</span><br><span class="line">   17) &quot;last-ok-ping-reply&quot;</span><br><span class="line">   18) &quot;283&quot;</span><br><span class="line">   19) &quot;last-ping-reply&quot;</span><br><span class="line">   20) &quot;283&quot;</span><br><span class="line">   21) &quot;down-after-milliseconds&quot;</span><br><span class="line">   22) &quot;30000&quot;</span><br><span class="line">   23) &quot;info-refresh&quot;</span><br><span class="line">   24) &quot;784&quot;</span><br><span class="line">   25) &quot;role-reported&quot;</span><br><span class="line">   26) &quot;slave&quot;</span><br><span class="line">   27) &quot;role-reported-time&quot;</span><br><span class="line">   28) &quot;141427&quot;</span><br><span class="line">   29) &quot;master-link-down-time&quot;</span><br><span class="line">   30) &quot;0&quot;</span><br><span class="line">   31) &quot;master-link-status&quot;</span><br><span class="line">   32) &quot;ok&quot;</span><br><span class="line">   33) &quot;master-host&quot;</span><br><span class="line">   34) &quot;172.16.6.243&quot;</span><br><span class="line">   35) &quot;master-port&quot;</span><br><span class="line">   36) &quot;6379&quot;</span><br><span class="line">   37) &quot;slave-priority&quot;</span><br><span class="line">   38) &quot;100&quot;</span><br><span class="line">   39) &quot;slave-repl-offset&quot;</span><br><span class="line">   40) &quot;2485282&quot;</span><br></pre></td></tr></table></figure><h4 id="恢复原主节点master"><a href="#恢复原主节点master" class="headerlink" title="恢复原主节点master"></a>恢复原主节点master</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /etc/redis.conf         # 修改配置文件；</span><br><span class="line">masterauth ialvin</span><br><span class="line"></span><br><span class="line">[root@master ~]# systemctl restart redis.service         # 重启redis；</span><br><span class="line">[root@master ~]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; auth ialvin</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication        # master节点已变成从节点</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:172.16.6.243</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:2662497</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:93005e7b0ff1af41731dac92725041afbfd01809</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:2662497</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2650868</span><br><span class="line">repl_backlog_histlen:11630</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master ~]# redis-cli -h 172.16.6.242 -p 26379   # 连接redis-sentinel查看所有从节点</span><br><span class="line">172.16.6.242:26379&gt; sentinel slaves mymaster</span><br><span class="line">1)  1) &quot;name&quot;</span><br><span class="line">    2) &quot;172.16.6.242:6379&quot;</span><br><span class="line">    3) &quot;ip&quot;</span><br><span class="line">    4) &quot;172.16.6.242&quot;</span><br><span class="line">    5) &quot;port&quot;</span><br><span class="line">    6) &quot;6379&quot;</span><br><span class="line">    7) &quot;runid&quot;</span><br><span class="line">    8) &quot;e93cddd24e01de32f189e48aba3945ba3460d2c5&quot;</span><br><span class="line">    9) &quot;flags&quot;</span><br><span class="line">   10) &quot;slave&quot;</span><br><span class="line">   11) &quot;link-pending-commands&quot;</span><br><span class="line">   12) &quot;0&quot;</span><br><span class="line">   13) &quot;link-refcount&quot;</span><br><span class="line">   14) &quot;1&quot;</span><br><span class="line">   15) &quot;last-ping-sent&quot;</span><br><span class="line">   16) &quot;0&quot;</span><br><span class="line">   17) &quot;last-ok-ping-reply&quot;</span><br><span class="line">   18) &quot;694&quot;</span><br><span class="line">   19) &quot;last-ping-reply&quot;</span><br><span class="line">   20) &quot;694&quot;</span><br><span class="line">   21) &quot;down-after-milliseconds&quot;</span><br><span class="line">   22) &quot;30000&quot;</span><br><span class="line">   23) &quot;info-refresh&quot;</span><br><span class="line">   24) &quot;5921&quot;</span><br><span class="line">   25) &quot;role-reported&quot;</span><br><span class="line">   26) &quot;slave&quot;</span><br><span class="line">   27) &quot;role-reported-time&quot;</span><br><span class="line">   28) &quot;538314&quot;</span><br><span class="line">   29) &quot;master-link-down-time&quot;</span><br><span class="line">   30) &quot;0&quot;</span><br><span class="line">   31) &quot;master-link-status&quot;</span><br><span class="line">   32) &quot;ok&quot;</span><br><span class="line">   33) &quot;master-host&quot;</span><br><span class="line">   34) &quot;172.16.6.243&quot;</span><br><span class="line">   35) &quot;master-port&quot;</span><br><span class="line">   36) &quot;6379&quot;</span><br><span class="line">   37) &quot;slave-priority&quot;</span><br><span class="line">   38) &quot;100&quot;</span><br><span class="line">   39) &quot;slave-repl-offset&quot;</span><br><span class="line">   40) &quot;2692453&quot;</span><br><span class="line">2)  1) &quot;name&quot;</span><br><span class="line">    2) &quot;172.16.6.244:6379&quot;</span><br><span class="line">    3) &quot;ip&quot;</span><br><span class="line">    4) &quot;172.16.6.244&quot;</span><br><span class="line">    5) &quot;port&quot;</span><br><span class="line">    6) &quot;6379&quot;</span><br><span class="line">    7) &quot;runid&quot;</span><br><span class="line">    8) &quot;5c34cdad4c9c8623bf5ebdf388d01d410e464fdc&quot;</span><br><span class="line">    9) &quot;flags&quot;</span><br><span class="line">   10) &quot;slave&quot;</span><br><span class="line">   11) &quot;link-pending-commands&quot;</span><br><span class="line">   12) &quot;0&quot;</span><br><span class="line">   13) &quot;link-refcount&quot;</span><br><span class="line">   14) &quot;1&quot;</span><br><span class="line">   15) &quot;last-ping-sent&quot;</span><br><span class="line">   16) &quot;0&quot;</span><br><span class="line">   17) &quot;last-ok-ping-reply&quot;</span><br><span class="line">   18) &quot;694&quot;</span><br><span class="line">   19) &quot;last-ping-reply&quot;</span><br><span class="line">   20) &quot;694&quot;</span><br><span class="line">   21) &quot;down-after-milliseconds&quot;</span><br><span class="line">   22) &quot;30000&quot;</span><br><span class="line">   23) &quot;info-refresh&quot;</span><br><span class="line">   24) &quot;7809&quot;</span><br><span class="line">   25) &quot;role-reported&quot;</span><br><span class="line">   26) &quot;slave&quot;</span><br><span class="line">   27) &quot;role-reported-time&quot;</span><br><span class="line">   28) &quot;1152017&quot;</span><br><span class="line">   29) &quot;master-link-down-time&quot;</span><br><span class="line">   30) &quot;0&quot;</span><br><span class="line">   31) &quot;master-link-status&quot;</span><br><span class="line">   32) &quot;ok&quot;</span><br><span class="line">   33) &quot;master-host&quot;</span><br><span class="line">   34) &quot;172.16.6.243&quot;</span><br><span class="line">   35) &quot;master-port&quot;</span><br><span class="line">   36) &quot;6379&quot;</span><br><span class="line">   37) &quot;slave-priority&quot;</span><br><span class="line">   38) &quot;100&quot;</span><br><span class="line">   39) &quot;slave-repl-offset&quot;</span><br><span class="line">   40) &quot;2692036&quot;</span><br></pre></td></tr></table></figure><h3 id="搭建过程注意事项"><a href="#搭建过程注意事项" class="headerlink" title="搭建过程注意事项"></a>搭建过程注意事项</h3><p>1.哨兵系统中的主从节点，与普通的主从节点并没有什么区别，故障发现和转移是由哨兵来控制和完成的。<br>2.哨兵节点本质上是Redis节点。<br>3.每个哨兵节点，只需要配置监控主节点，便可以自动发现其他的哨兵节点和从节点。<br>4.在哨兵节点启动和故障转移阶段，各个节点的配置文件会被重写(config rewrite)。<br>5.例子中，一个哨兵只监控了一个主节点；实际上，一个哨兵可以监控多个主节点，通过配置多条sentinel monitor即可实现。<br>6.每个哨兵有唯一标示myid，在copy配置文件时，若存在该配置要删掉，哨兵启动后会自动生成新的myid。  </p><h2 id="哨兵原理"><a href="#哨兵原理" class="headerlink" title="哨兵原理"></a>哨兵原理</h2><h3 id="架构如下图"><a href="#架构如下图" class="headerlink" title="架构如下图"></a>架构如下图</h3><p><img src="https://coding.net/u/alvin_me/p/blogpics/git/raw/master/shaobingdesign.png" alt="">  </p><h3 id="哨兵相关命令"><a href="#哨兵相关命令" class="headerlink" title="哨兵相关命令"></a>哨兵相关命令</h3><blockquote><p>info sentinel：获取监控的所有主节点的基本信息<br>sentinel masters：获取监控的所有主节点的详细信息<br>sentinel master mymaster：获取监控的主节点mymaster的详细信息<br>sentinel slaves mymaster：获取监控的主节点mymaster的从节点的详细信息<br>sentinel sentinels mymaster：获取监控的主节点mymaster的哨兵节点的详细信息<br>sentinel get-master-addr-by-name mymaster：获取监控的主节点mymaster的地址信息<br>sentinel is-master-down-by-addr：哨兵节点之间可以通过该命令询问主节点是否下线，从而对是否客观下线做出判断<br>sentinel monitor mymaster 172.16.6.242 6379 2：与部署哨兵节点时配置文件中的sentinel monitor功能完全一样<br>sentinel remove mymaster：取消当前哨兵节点对主节点mymaster的监控<br>sentinel failover mymaster：强制对mymaster执行故障转移，即便当前的主节点运行完好   </p></blockquote><h3 id="相关概念及原理"><a href="#相关概念及原理" class="headerlink" title="相关概念及原理"></a>相关概念及原理</h3><blockquote><p>定时任务：每个哨兵节点维护了3个定时任务。定时任务的功能分别如下：通过向主从节点发送info命令获取最新的主从结构；通过发布订阅功能获取其他哨兵节点的信息；通过向其他节点发送ping命令进行心跳检测，判断是否下线。<br>主观下线：在心跳检测的定时任务中，如果其他节点超过一定时间没有回复，哨兵节点就会将其进行主观下线。顾名思义，主观下线的意思是一个哨兵节点“主观地”判断下线；与主观下线相对应的是客观下线。<br>客观下线：哨兵节点在对主节点进行主观下线后，会通过sentinel is-master-down-by-addr命令询问其他哨兵节点该主节点的状态；如果判断主节点下线的哨兵数量达到一定数值，则对该主节点进行客观下线。<br><strong>需要特别注意的是，客观下线是主节点才有的概念；如果从节点和哨兵节点发生故障，被哨兵主观下线后，不会再有后续的客观下线和故障转移操作。</strong><br>选举领导者哨兵节点：当主节点被判断客观下线以后，各个哨兵节点会进行协商，选举出一个领导者哨兵节点，并由该领导者节点对其进行故障转移操作。<br><strong>监视该主节点的所有哨兵都有可能被选为领导者，选举使用的算法是Raft算法；Raft算法的基本思路是先到先得：即在一轮选举中，哨兵A向哨兵B发送成为领导者的申请，如果B没有同意过其他哨兵，则会同意A成为领导者。选举的具体过程这里不做详细描述，一般来说，哨兵选择的过程很快，谁先完成客观下线，一般就能成为领导者。</strong><br>故障转移：选举出的领导者哨兵，开始进行故障转移操作，该操作大体可以分为3个步骤：    </p></blockquote><p>1.在从节点中选择新的主节点：选择的原则是，首先过滤掉不健康的从节点；然后选择优先级最高的从节点(由slave-priority指定)；如果优先级无法区分，则选择复制偏移量最大的从节点；如果仍无法区分，则选择runid最小的从节点。<br>2.更新主从状态：通过slaveof no one命令，让选出来的从节点成为主节点；并通过slaveof命令让其他节点成为其从节点。<br>3.将已经下线的主节点(即6379)设置为新的主节点的从节点，当6379重新上线后，它会成为新的主节点的从节点。  </p><h3 id="配置建议"><a href="#配置建议" class="headerlink" title="配置建议"></a>配置建议</h3><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><blockquote><p>sentinel monitor <master-name> <ip> <redis-port> <quorum>  </quorum></redis-port></ip></master-name></p></blockquote><p>sentinel monitor是哨兵最核心的配置，在前文讲述部署哨兵节点时已说明，其中：master-name指定了主节点名称，ip和redis-port指定了主节点地址，quorum是判断主节点客观下线的哨兵数量阈值：当判定主节点下线的哨兵数量达到quorum时，对主节点进行客观下线。建议取值为哨兵数量的一半加1。  </p><blockquote><p>sentinel down-after-milliseconds <master-name> <milliseconds>  </milliseconds></master-name></p></blockquote><p>sentinel down-after-milliseconds与主观下线的判断有关：哨兵使用ping命令对其他节点进行心跳检测，如果其他节点超过milliseconds没有回复，哨兵就会将其进行主观下线。该配置对主节点、从节点和哨兵节点的主观下线判定都有效。</p><p>down-after-milliseconds的默认值是30000，即30s；可以根据不同的网络环境和应用要求来调整：值越大，对主观下线的判定会越宽松，好处是误判的可能性小，坏处是故障发现和故障转移的时间变长，客户端等待的时间也会变长。例如，如果应用对可用性要求较高，则可以将值适当调小，当故障发生时尽快完成转移；如果网络环境相对较差，可以适当提高该阈值，避免频繁误判。  </p><blockquote><p>sentinel parallel-syncs <master-name> <numreplicas>  </numreplicas></master-name></p></blockquote><p>sentinel parallel-syncs与故障转移之后从节点的复制有关：它规定了每次向新的主节点发起复制操作的从节点个数。例如，假设主节点切换完成之后，有3个从节点要向新的主节点发起复制；如果parallel-syncs=1，则从节点会一个一个开始复制；如果parallel-syncs=3，则3个从节点会一起开始复制。</p><p>parallel-syncs取值越大，从节点完成复制的时间越快，但是对主节点的网络负载、硬盘负载造成的压力也越大；应根据实际情况设置。例如，如果主节点的负载较低，而从节点对服务可用的要求较高，可以适量增加parallel-syncs取值。parallel-syncs的默认值是1。</p><blockquote><p>sentinel failover-timeout <master-name> <milliseconds>   </milliseconds></master-name></p></blockquote><p>sentinel failover-timeout与故障转移超时的判断有关，但是该参数不是用来判断整个故障转移阶段的超时，而是其几个子阶段的超时，例如如果主节点晋升从节点时间超过timeout，或从节点向新的主节点发起复制操作的时间(不包括复制数据的时间)超过timeout，都会导致故障转移超时失败。</p><p>failover-timeout的默认值是180000，即180s；如果超时，则下一次该值会变为原来的2倍。</p><h4 id="操作建议"><a href="#操作建议" class="headerlink" title="操作建议"></a>操作建议</h4><ol><li>哨兵节点的数量应不止一个，一方面增加哨兵节点的冗余，避免哨兵本身成为高可用的瓶颈；另一方面减少对下线的误判。此外，这些不同的哨兵节点应部署在不同的物理机上。  </li><li>哨兵节点的数量应该是奇数，便于哨兵通过投票做出“决策”：领导者选举的决策、客观下线的决策等。  </li><li>各个哨兵节点的配置应一致，包括硬件、参数等；此外，所有节点都应该使用<code>ntp</code>或类似服务，保证时间准确、一致。  </li><li>哨兵的配置提供者和通知客户端功能，需要客户端的支持才能实现，如前文所说的Jedis；如果开发者使用的库未提供相应支持，则可能需要开发者自己实现。  </li><li>当哨兵系统中的节点在docker（或其他可能进行端口映射的软件）中部署时，应特别注意端口映射可能会导致哨兵系统无法正常工作，因为哨兵的工作基于与其他节点的通信，而docker的端口映射可能导致哨兵无法连接到其他节点。例如，哨兵之间互相发现，依赖于它们对外宣称的IP和port，如果某个哨兵A部署在做了端口映射的docker中，那么其他哨兵使用A宣称的port无法连接到A。  </li></ol><p>参考：  </p><ol><li><a href="https://www.cnblogs.com/kismetv/p/9609938.html" target="_blank" rel="noopener">深入学习Redis（4）：哨兵</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哨兵在复制的基础上，哨兵实现了自动化的故障恢复。缺陷：写操作无法负载均衡；存储能力受到单机的限制。&lt;br&gt;Redis2.8引入哨兵，主要功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;监控（Monitoring：&lt;/strong&gt; 哨兵会不断地检查主节点和从节点是否运作正常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动故障转移（Automatic failover）：&lt;/strong&gt; 当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置提供者（Configuration provider）：&lt;/strong&gt; 客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通知（Notification）：&lt;/strong&gt; 哨兵可以将故障转移的结果发送给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文哨兵系统，包含1个主节点、2个从节点和3个哨兵节点。&lt;br&gt;
    
    </summary>
    
      <category term="数据存储" scheme="https://dongz.me/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="redis" scheme="https://dongz.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从复制</title>
    <link href="https://dongz.me/2019/01/06/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>https://dongz.me/2019/01/06/Redis主从复制/</id>
    <published>2019-01-06T04:20:00.000Z</published>
    <updated>2019-01-06T04:33:00.101Z</updated>
    
    <content type="html"><![CDATA[<p>主从复制，就是把一台Redis服务的数据拷贝到另一台Redis服务器。前者称为主节点，后者称为从节点。数据只能从主节点流向从节点。一个主节点可以有多个从节点，一个从节点只能有一个主节点。<br>Redis的主从架构主要有两种模式：主从复制模式和链式主从复制模式。</p><p>主从复制的作用主要有以下几点：</p><ol><li><strong>数据冗余：</strong>实现数据热备份，提供多个数据冗余备份保证数据安全性。</li><li><strong>增强容错：</strong>主节点故障，从节点仍可以对外提供读服务。</li><li><strong>负载均衡：</strong>读写分离，分担服务器负载压力。</li><li><strong>高可用基础：</strong>是哨兵和集群实现的基础。<a id="more"></a></li></ol><h2 id="主从复制实战"><a href="#主从复制实战" class="headerlink" title="主从复制实战"></a>主从复制实战</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>系统：centos7<br>服务器：master(172.16.6.242)、slave1(172.16.6.243)、slave2(172.16.6.244)<br>Redis版本：5.0.3</p><h4 id="同步时间"><a href="#同步时间" class="headerlink" title="同步时间"></a>同步时间</h4><p>服务器依次执行如下命令：<br>    sudo ntpdate cn.pool.ntp.org  // cn.pool.ntp.org为网络时间服务器，也可以同步自己的时间服务器</p><p>若ntpdate未安装，执行如下命令安装：<br>    yum -y install ntp ntpdate</p><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><p>设置yum源，以安置最新稳定版本Redis：<br>    yum install -y <a href="http://rpms.famillecollet.com/enterprise/remi-release-7.rpm" target="_blank" rel="noopener">http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># master安装  </span><br><span class="line">[root@master ~]# yum --enablerepo=remi install redis</span><br><span class="line"></span><br><span class="line"># slave1安装  </span><br><span class="line">[root@slave1 ~]# yum --enablerepo=remi install redis</span><br><span class="line"></span><br><span class="line"># slave2安装  </span><br><span class="line">[root@slave2 ~]# yum --enablerepo=remi install redis</span><br></pre></td></tr></table></figure><h3 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h3><p>配置master节点并启动服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /etc/redis.conf</span><br><span class="line">bind 0.0.0.0        # 监控本地所有IP；</span><br><span class="line">requirepass ialvin      # 设置密码 ialvin；</span><br><span class="line">[root@master ~]# systemctl start redis</span><br><span class="line">[root@master ~]# ss -tnl</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port               Peer Address:Port</span><br><span class="line">LISTEN     0      128          *:6379                     *:*</span><br><span class="line">LISTEN     0      128          *:111                      *:*</span><br><span class="line">LISTEN     0      128          *:22                       *:*</span><br></pre></td></tr></table></figure></p><p>配置slave1节点并启动服务，配置文件方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[root@slave1 ~]# vim /etc/redis.conf</span><br><span class="line">bind 0.0.0.0            # 监控本地所有IP；</span><br><span class="line">requirepass ialvin      # 设置密码为ialvin；</span><br><span class="line"></span><br><span class="line">replicaof 172.16.6.242 6379       # 设置主节点IP 端口；</span><br><span class="line">masterauth ialvin           # 主节点认证密码；</span><br><span class="line"></span><br><span class="line">[root@slave1 ~]# systemctl start redis       # 启动服务；</span><br><span class="line">[root@slave1 ~]# ss -tnl     # 端口已经开启；</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port           Peer Address:Port</span><br><span class="line">LISTEN     0      128    172.16.6.243:7946                *:*</span><br><span class="line">LISTEN     0      128          *:27018                    *:*</span><br><span class="line">LISTEN     0      128          *:6379                     *:*</span><br><span class="line"></span><br><span class="line">[root@slave1 ~]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; auth ialvin</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:172.16.6.242</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:6</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:140642</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:970c2af1479671a4acb859113f0527c94c1a1fea</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:140642</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:295</span><br><span class="line">repl_backlog_histlen:140348</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 切换到master查看</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=172.16.6.243,port=6379,state=online,offset=140838,lag=1</span><br><span class="line">master_replid:970c2af1479671a4acb859113f0527c94c1a1fea</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:140838</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:140838</span><br></pre></td></tr></table></figure></p><p>配置slave2节点并启动服务，命令行方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@slave2 ~]# vim /etc/redis.conf </span><br><span class="line">bind 0.0.0.0            # 监控本地所有IP；</span><br><span class="line">requirepass ialvin      # 设置密码为ialvin；</span><br><span class="line"></span><br><span class="line">[root@slave2 ~]# systemctl start redis</span><br><span class="line">[root@slave2 ~]# ss -tnl</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port               Peer Address:Port</span><br><span class="line">LISTEN     0      128          *:6379                     *:*</span><br><span class="line">LISTEN     0      128          *:111                      *:*</span><br><span class="line">LISTEN     0      128          *:22                       *:*</span><br><span class="line">LISTEN     0      128    127.0.0.1:631                      *:*</span><br><span class="line"></span><br><span class="line">[root@slave2 ~]# redis-cli -a ialvin</span><br><span class="line">127.0.0.1:6379&gt; info replication        # 目前slave2还不是master的从节点；</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:bdcd0e33999ba623c1363dbce3489775fc972850</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; config get replicaof      # 查看当前redis节点配置信息；</span><br><span class="line">1) &quot;replicaof&quot;</span><br><span class="line">2) &quot;&quot;</span><br><span class="line">127.0.0.1:6379&gt; replicaof 172.16.6.242 6379   # 配置主节点IP 端口；</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get masterauth       # 认证信息；</span><br><span class="line">1) &quot;masterauth&quot;</span><br><span class="line">2) &quot;&quot;</span><br><span class="line">127.0.0.1:6379&gt; config set masterauth iavlin        # 配置认证；</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication        # 主节点配置完成；</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:172.16.6.242</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:10</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:141496</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:970c2af1479671a4acb859113f0527c94c1a1fea</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:141496</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:141483</span><br><span class="line">repl_backlog_histlen:14</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; config rewrite      # 保存到配置文件中；</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">[root@slave2 ~]# tail -3  /etc/redis.conf        # 已经保存到配置文件中；</span><br><span class="line"># Generated by CONFIG REWRITE</span><br><span class="line">replicaof 172.16.6.242 6379</span><br><span class="line">masterauth &quot;ialvin&quot;</span><br></pre></td></tr></table></figure></p><h3 id="主从复制测试"><a href="#主从复制测试" class="headerlink" title="主从复制测试"></a>主从复制测试</h3><p>统一在默认库0做测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#主节点master创建key</span><br><span class="line">[root@master ~]# redis-cli -a ialvin</span><br><span class="line">127.0.0.1:6379&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br><span class="line"></span><br><span class="line"># slave1上查看</span><br><span class="line">[root@slave1 ~]# redis-cli -a ialvin</span><br><span class="line">127.0.0.1:6379&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br><span class="line"></span><br><span class="line"># slave2上查看</span><br><span class="line">[root@slave2 ~]# redis-cli -a ialvin</span><br><span class="line">127.0.0.1:6379&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br><span class="line"></span><br><span class="line"># 主库写入key，从库可以读到</span><br></pre></td></tr></table></figure></p><h2 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h2><p>Redis复制过程大体可分为三个阶段：建立连接、数据同步、命令传播。  </p><h3 id="建立连接阶段"><a href="#建立连接阶段" class="headerlink" title="建立连接阶段"></a>建立连接阶段</h3><h4 id="主服务器的地址和端口"><a href="#主服务器的地址和端口" class="headerlink" title="主服务器的地址和端口"></a>主服务器的地址和端口</h4><p>当输入replicaof命令或者在配置文件中配置replicaof信息时，从服务器会将主服务器的ip地址和端口号保存到服务器状态的属性里面。</p><h4 id="建立套接字连接"><a href="#建立套接字连接" class="headerlink" title="建立套接字连接"></a>建立套接字连接</h4><p>在replicaof命令执行之后，从服务器会根据属性里维护的主节点的ip和端口，向主服务器发起socket连接。以下为连接建立后主从节点的操作。<br>从节点：为该socket建立一个专门处理复制工作的文件事件处理器，负责后续的复制工作，如接收RDB文件、接收命令传播等。<br>主节点：为该socket创建相应的客户端状态，保存客户端信息。</p><h4 id="PING探活"><a href="#PING探活" class="headerlink" title="PING探活"></a>PING探活</h4><p>从节点成为主节点的客户端之后，发送ping命令进行首次请求，检查socket连接是否可用，以及主节点当前是否能够处理请求。<br>正常情况下主节点会返回PONG，异常情况下从节点会断开socket连接，稍后会重新建立连接。</p><h4 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h4><p>主节点设置了requirepass开启连接验证，从节点需要设置masterauth属性，且与主节点requirepass值设置为相同值。在从节点收到主节点PONG回复时，从节点会发送auth命令，命令格式为“auth + 密码”进行密码验证，其中密码为masterauth参数配置的密码。</p><h4 id="发送从节点端口信息"><a href="#发送从节点端口信息" class="headerlink" title="发送从节点端口信息"></a>发送从节点端口信息</h4><p>身份验证之后，从节点会向主节点发送其监听的端口号（使用默认端口为6379），主节点将该信息保存到该从节点对应的客户端的slave_listening_port字段中；用来在主节点中执行info Replication时显示。</p><h3 id="数据同步阶段"><a href="#数据同步阶段" class="headerlink" title="数据同步阶段"></a>数据同步阶段</h3><p>主从连接建立以后，便开始进行该阶段。执行方式：从节点向主节点发送psync命令（Redis2.8以前是sync命令）开始同步。  </p><p>该阶段是主从复制核心阶段，根据主从节点状态不同分为全量复制和部分复制。  </p><ul><li>全量复制：初始化同步或无法进行部分复制时采用的同步方式，主节点将全量数据发给从节点，属于重型操作。</li><li>部分复制：网络短暂中断情况下同步方式，主节点只将中断期间的写命令发送给从节点，比全量复制高效。但长时间网络中断，主节点无法完整保存期间执行的写命令，只能进行全量同步。</li></ul><p>该阶段以前从节点是主节点的客户端，主节点不是从节点的客户端；该阶段及以后阶段主从互为客户端。原因是从该阶段开始主节点开始主动向从节点发起请求。</p><h4 id="全量复制同步"><a href="#全量复制同步" class="headerlink" title="全量复制同步"></a>全量复制同步</h4><p>Redis2.8以前只有该同步方式，通过psync命令进行全量复制过程：  </p><ol><li>从节点向主节点发送全量复制请求；或从节点向主节点发送部分复制请求，但主节点判断只能进行全量复制。  </li><li>主节点接收全量复制请求，开线程执行bgsave命令生成RDB文件，同时使用复制缓冲区记录此刻开始的所有写命令。  </li><li>bgsave命令执行完以后，将RDB文件发送到从节点，从节点先清除旧数据然后加载RDB文件（阻塞，进行时不能响应客户端请求）。</li><li>主节点将复制缓冲区所有命令发送给从节点，从节点执行命令，此时从节点数据和主节点数据保持一致。</li><li>从节点若开启AOF，会触发bgrewriteaof执行，保证和主节点AOF文件一致。</li></ol><h4 id="部分复制同步"><a href="#部分复制同步" class="headerlink" title="部分复制同步"></a>部分复制同步</h4><p>Redis2.8以后新增复制方式，缓解全量复制带来的性能开销及其它问题。<br>相关概念：<br><strong>复制偏移量</strong><br>主节点和从节点同时维护一个复制偏移量（offset），代表主节点向从节点传递的字节数；主节点向从节点传递N个字节，则主节点offset增加N；从节点从主节点接收N个字节，则从节点offset增加N。<br>从节点携带offset请求主节点进行部分复制，主节点通过比较自己保存的offset和从节点offset值确定本次部分复制的数据范围。<br>例如，如果主节点的offset是1000，而从节点的offset是500，那么部分复制就需要将offset为501-1000的数据传递给从节点。而offset为501-1000的数据存储在复制缓冲区。</p><p><strong>复制缓冲区</strong><br>复制积压缓冲区是由主节点维护的、固定长度的、先进先出(FIFO)队列，默认大小1MB，可通过修改repl-backlog-size自定义配置；主要作用是备份主节点最近发送给从节点的数据。只有一个复制积压缓冲区。<br>  在命令传播阶段，主节点除了向从节点发送命令，同时会发一份到复制缓冲区作为备份，同时会记录每个字节的offset。部分复制的数据区间从该区域获取，当主从节点offset差距过大超过缓冲区长度时，无法进行部分复制，<br>只能进行全量复制。</p><p><strong>Redis运行ID</strong><br>Redis启动时生成的40位16进制随机串，每次启动不一样。无论主从，每个节点都会生成。可通过 <code>redis-cli info server | grep run_id</code>查看。<br>  主从节点初次复制时，主节点将自己的runid发送给从节点，从节点将这个runid保存起来；当断线重连时，从节点会将这个runid发送给主节点；主节点根据runid判断能否进行部分复制，若相同则发起部分复制请求（还要综合offset和复制缓冲区情况），<br>不相同则全量复制。</p><p>部分复制执行过程：  </p><ol><li>未执行过slaveof或最近执行了slaveof no one，则从节点发送命令为psync ? -1，向主节点请求全量复制。  </li><li>之前执行了slaveof，则发送命令为psync <runid> <offset>，其中runid为上次复制的主节点的runid，offset为上次复制截止时从节点保存的复制偏移量。  </offset></runid></li><li>如果主节点版本低于Redis2.8，则返回-ERR回复，此时从节点重新发送sync命令执行全量复制。  </li><li>如果主节点版本够新，且runid与从节点发送的runid相同，且从节点发送的offset之后的数据在复制积压缓冲区中都存在，则回复+CONTINUE，表示将进行部分复制，从节点等待主节点发送其缺少的数据即可。</li><li>如果主节点版本够新，但是runid与从节点发送的runid不同，或从节点发送的offset之后的数据已不在复制积压缓冲区中(在队列中被挤出了)，则回复+FULLRESYNC <runid> <offset>，表示要进行全量复制，<br>其中runid表示主节点当前的runid，offset表示主节点当前的offset，从节点保存这两个值，以备使用。</offset></runid></li></ol><h5 id="redis4-0升级psync"><a href="#redis4-0升级psync" class="headerlink" title="redis4.0升级psync"></a>redis4.0升级psync</h5><p>Redis4.0之前的psync我们称为psync1，4.0及以后升级后的psnyc我们称为psync2。  </p><p>psync1主要存在以下问题：  </p><ol><li>节点重启后，runid和复制缓冲区丢失，只能进行全量复制。  </li><li>主从发生切换时，只能进行全量复制。  </li></ol><p>psync2主要解决了以上问题。psync2在psync1基础上新增两个复制id：  </p><ul><li>master_replid: 复制id1(后文简称：replid1)，一个长度为41个字节(40个随机串+’0’)的字符串，每个节点都有，和runid没有直接关联，但和runid生成规则相同。当节点变为从节点后，自己的replid1会被主节点的replid1覆盖。  </li><li>master_replid2：复制id2(后文简称:replid2),默认初始化为全0，用于存储上次主节点的replid1。</li></ul><p><strong>重启实现部分复制</strong>  </p><ol><li>Redis关闭时，通过shutdown save，都会调用rdbSaveInfoAuxFields函数，把当前实例的repl-id和repl-offset保存到RDB文件中。  </li><li>重启时Redis加载RDB文件，会专门处理文件中辅助字段(AUX fields）信息，把其中repl_id和repl_offset加载到实例中，分别赋给master_replid和master_repl_offset两个变量值。<br>若开启了AOF持久化，由于加载优先级较高，导致重启后从节点依旧使用全量复制。  </li><li>从节点向主节点上报master_replid和master_repl_offset+1，若与主节点的master_replid1或replid2有一个相等，且master_repl_offset+1字节，还存在于主节点的复制积压缓冲区中，则进行部分复制。</li></ol><p><strong>主从切换实现部分复制</strong><br>Redis从节点默认开启复制缓冲区功能，以便主节点故障从节点切换为主节点后，其他落后该节点的从节点可以从缓冲区中获取缺少的命令。该过程的实现通过两组replid、offset替换原来的master runid和offset变量实现：<br>第一组：master_replid和master_repl_offset：如果Redis是主节点，则表示为自己的replid和复制偏移量； 如果Redis是从节点，则表示同步主节点的replid1和复制偏移量。<br>第二组：master_replid2和second_repl_offset：无论主从，都表示自己上次主节点repid1和复制偏移量。  </p><p>判断是否使用部分复制条件：如果从库提供的master_replid与master的replid相同，或者与master的replid2相同，且master_repl_offset+1字节，还存在于目标节点的复制积压缓冲区中，则进行部分复制。</p><h3 id="命令传播阶段"><a href="#命令传播阶段" class="headerlink" title="命令传播阶段"></a>命令传播阶段</h3><p>在命令传播阶段，除了发送写命令，主从节点还维持着心跳机制：PING和REPLCONF ACK。心跳机制对于主从复制的超时判断、数据安全等有作用。  </p><p><strong>主==&gt;从：PING</strong><br>每隔一段时间（默认10秒，通过repl-ping-slave-period参数指定）主节点向从节点发送PING命令判断从节点是否在线。  </p><p><strong>从==&gt;主：REPLCONF ACK</strong><br>从节点每秒1次向主节点发送REPLCONF ACK命令，命令格式为：REPLCONF ACK {offset}，其中offset指从节点保存的复制偏移量，作用有以下几点：  </p><ol><li>实时监测主从节点网络状态<br>该命令会被主节点用于复制超时的判断，在主节点中使用info Replication，可以看到其从节点的状态中的lag值，代表的是主节点上次收到该REPLCONF ACK命令的时间间隔，在正常情况下，该值应该是0或1  </li><li>检测命令丢失<br>从节点发送了自身的offset，主节点会与自己的offset对比，如果从节点数据缺失（如网络丢包），主节点会推送缺失的数据（这里也会利用复制积压缓冲区）。<br>注意，offset和复制积压缓冲区，不仅可以用于部分复制，也可以用于处理命令丢失等情形；区别在于前者是在断线重连后进行的，而后者是在主从节点没有断线的情况下进行的。  </li><li>辅助保证从节点的数量和延迟<br>Redis主节点中使用min-slaves-to-write和min-slaves-max-lag参数，来保证主节点在不安全的情况下不会执行写命令；所谓不安全，是指从节点数量太少，或延迟过高。例如min-slaves-to-write和min-slaves-max-lag分别是3和10，<br>含义是如果从节点数量小于3个，或所有从节点的延迟值都大于10s，则主节点拒绝执行写命令。而这里从节点延迟值的获取，就是通过主节点接收到REPLCONF ACK命令的时间来判断的，即前面所说的info Replication中的lag值。</li></ol><p>参考：  </p><ol><li><a href="https://www.cnblogs.com/kismetv/p/9236731.html" target="_blank" rel="noopener">深入学习Redis（3）：主从复制</a></li><li><a href="https://juejin.im/post/5b67029c6fb9a04fa42fd592#heading-5" target="_blank" rel="noopener">redis系列–主从复制以及redis复制演进</a></li><li><a href="https://juejin.im/post/5b625b9be51d4519956759d0#heading-14" target="_blank" rel="noopener">redis系列：主从复制</a></li><li><a href="https://www.jianshu.com/p/6fe7c56e487c" target="_blank" rel="noopener">Redis4.0新特性(二)-PSYNC2</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主从复制，就是把一台Redis服务的数据拷贝到另一台Redis服务器。前者称为主节点，后者称为从节点。数据只能从主节点流向从节点。一个主节点可以有多个从节点，一个从节点只能有一个主节点。&lt;br&gt;Redis的主从架构主要有两种模式：主从复制模式和链式主从复制模式。&lt;/p&gt;
&lt;p&gt;主从复制的作用主要有以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据冗余：&lt;/strong&gt;实现数据热备份，提供多个数据冗余备份保证数据安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增强容错：&lt;/strong&gt;主节点故障，从节点仍可以对外提供读服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载均衡：&lt;/strong&gt;读写分离，分担服务器负载压力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高可用基础：&lt;/strong&gt;是哨兵和集群实现的基础。
    
    </summary>
    
      <category term="数据存储" scheme="https://dongz.me/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="redis" scheme="https://dongz.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="https://dongz.me/2018/12/21/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://dongz.me/2018/12/21/函数式编程/</id>
    <published>2018-12-20T16:27:00.000Z</published>
    <updated>2018-12-21T13:38:09.162Z</updated>
    
    <content type="html"><![CDATA[<p>最早是从一些博客上看到过函数式编程，但是没有太在意。js支持将函数作为传出/传入参数，可以存储在变量中。java8中Lambda表达式 、Stream流处理等功能等闪亮登场，除此之外还支持函数接口。越来越多语言中引入函数式编程的特性，种种苗头都预示着函数式编程越来越得到重视。这里主要对函数式编程思想做一些理解和认识。<br><a id="more"></a></p><h2 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h2><h3 id="形式系统"><a href="#形式系统" class="headerlink" title="形式系统"></a>形式系统</h3><blockquote><p>概念：先是确立一些互不冲突的基础原理，以及一些操作这些原理的规则，然后就可以把这些原理以及规则拼凑起来形成新的更加复杂的规则或是定理了。数学家把这种方法称为“形式系统”或是“演算”。    </p><p>理解：<br>示例1-没有人见过这样的一个圆，但是我们知道怎样的圆是完美的圆，而且可以用公式把它描述出来。<br>示例2-自然数，很难说所有的自然数都与客观世界有关，随便举一个超级大的数，这个数可能就和世界上任何事物无关，因为这个世界可能不是无穷大的。</p></blockquote><p><strong>notice:</strong> 形式系统是客观存在的，虽然不同文明不同智慧生物对它们的存在和理解方式有差异，与客观世界有关的更容易被发现和理解，而与客观世界无关的不容易被发现和理解。</p><h3 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h3><blockquote><p>阿隆佐设计了一个名为<a href="https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97" target="_blank" rel="noopener">lambda演算</a>的形式系统。这个系统实质上是为其中一个超级机器设计的编程语言。在这种语言里面，函数的参数是函数，返回值也是函数。  </p><p>艾伦·图灵设计了一种完全不同的系统（后来被称为图灵机），并用这种系统得出了和阿隆佐相似的答案。到了后来人们证明了图灵机和lambda演算的能力是一样的。  </p><p>二战时期IBM制造了第一台机器Mark一号用来计算各种火炮发射数据表。Mark一号重5吨，由75万个零部件构成，每一秒可以完成3次运算。</p><p>1949年第一台电子离散变量自动计算机诞生并取得了巨大的成功。它是冯·诺伊曼设计架构的第一个实例，也是一台现实世界中实现的图灵机。</p><p>1958年John McCarthy的MIT教授发明了一种列表处理语言（Lisp），这种语言是一种阿隆佐lambda演算在现实世界的实现，而且它能在冯·诺伊曼计算机上运行！很多计算机科学家都认识到了Lisp强大的能力。</p><p>1973年在MIT人工智能实验室的一些程序员研发出一种机器，并把它叫做Lisp机。于是阿隆佐的lambda演算也有自己的硬件实现了！</p></blockquote><h2 id="函数式编程-FP"><a href="#函数式编程-FP" class="headerlink" title="函数式编程(FP)"></a>函数式编程(FP)</h2><blockquote><p>函数式编程是阿隆佐思想的在现实世界中的实现。不过不是全部的lambda演算思想都可以运用到实际中，因lambda演算在设计的时候就不是为了在各种现实世界中的限制下工作的。函数式编程只是一系列想法，而不是一套严苛的规定。</p><p>Lambda演算在最初设计的时候就是为了研究计算相关的问题，所以函数式编程主要解决的也是计算问题。</p><p>函数就是函数式编程中的基础元素，可以完成几乎所有的操作，哪怕最简单的计算，也是用函数完成的。</p><p>FP中变量称为符号，且都是final的。</p><p>函数式程序可以通过函数参数保存状态。</p></blockquote><h3 id="FP的优点"><a href="#FP的优点" class="headerlink" title="FP的优点"></a>FP的优点</h3><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><blockquote><p>因为FP中的每个符号都是final的，所以没有什么函数会有副作用。函数不会修改外部状态值，测试不需要关心外部状态值，也不需要关心函数调用顺序，唯一需要关心的仅仅是函数参数。  </p></blockquote><h4 id="调试查错"><a href="#调试查错" class="headerlink" title="调试查错"></a>调试查错</h4><blockquote><p>只要传递参数一致，错误百分百可以重现。<br>返回值异常时，检查栈上的数据，查看哪些参数传给了哪些函数，函数返回值是什么。跳进对应函数步进调试定位问题即可。</p></blockquote><h4 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h4><blockquote><p>不需要任何改动，所有FP程序都是可以并发执行的。<br>由于根本不需要采用锁机制，因此完全不需要担心死锁或是并发竞争的发生。<br>编译器可以对函数式代码进行分析，对耗时的函数并行调用。</p></blockquote><h4 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h4><blockquote><p>FP的程序中所有状态就是传给函数的参数，而参数都是储存在栈上的，这一特性让实现热部署变的简单。<br>只要比较一下正在运行的代码以及新的代码获得一个diff，然后用这个diff更新现有的代码，新代码的热部署就完成了。</p></blockquote><h4 id="机器辅助优化及证明"><a href="#机器辅助优化及证明" class="headerlink" title="机器辅助优化及证明"></a>机器辅助优化及证明</h4><blockquote><p>FP语言是可以用数学方法来分析的。只要是能在纸上写出来的数学运算就可以用这种语言表述出来。<br>可以用这种方法来证明代码的正确性，甚至可以设计出能够自动分析代码并为单元测试自动生成边缘测试用例的工具出来。</p></blockquote><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><blockquote><p>所谓的高阶函数就是对其他函数进行操作（比如说把这些函数当成参数）的函数。</p></blockquote><p>如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class MessageHandler &#123;</span><br><span class="line">    void handleMessage(Message msg, Function getClientCode) &#123;</span><br><span class="line">        // ...</span><br><span class="line">        Message msg1 = msg.setClientCode(getClientCode());</span><br><span class="line">        // ...</span><br><span class="line"></span><br><span class="line">        sendMessage(msg1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String getClientCodeOne() &#123;</span><br><span class="line">    return &quot;ABCD_123&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String getClientCodeTwo() &#123;</span><br><span class="line">    return &quot;123_ABCD&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MessageHandler handler = new MessageHandler();</span><br><span class="line">handler.handleMessage(someMsg, getClientCodeOne);</span><br></pre></td></tr></table></figure><blockquote><p>好处：一是不再受限于多层类的结构。这样做可以在运行时传递新的函数，可以在任何时候改变这些函数，而且这些改变不仅更加精准而且触碰的代码更少。</p></blockquote><h3 id="柯里化-Currying"><a href="#柯里化-Currying" class="headerlink" title="柯里化(Currying)"></a>柯里化(Currying)</h3><blockquote><p>是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。<br>使用匿名单参数函数来实现多参数函数的方法，如下：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo = function(a) &#123;</span><br><span class="line">  return function(b) &#123;</span><br><span class="line">    return a * a + b * b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>好处：可以快速且简单的实现函数封装，让我们更专注于自己的设计；可以实现概念编程，从而完全不需要设计模式。<br><a href="https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96" target="_blank" rel="noopener">了解更多</a></p></blockquote><h3 id="惰性求值"><a href="#惰性求值" class="headerlink" title="惰性求值"></a>惰性求值</h3><p>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = somewhatLongOperation1();</span><br><span class="line">String s2 = somewhatLongOperation2();</span><br><span class="line">String s3 = concatenate(s1, s2);</span><br></pre></td></tr></table></figure></p><p>其中s1和s2函数作为函数concatenate的参数，执行concatenate需要用到s1和s2的时候才去执行s1和s2函数。  </p><blockquote><p>支持惰性求值的编译器可以抵消相同项从而避免执行无谓的代码，安排代码执行顺序从而实现更高的执行效率甚至是减少错误。<br>惰性求值技术允许定义无穷数据结构，把很多问题抽象化，然后在更高的层面上解决它们。如定义一个Fibonacci数列的无穷列表结构，列表中只有真正会被用到的数才会被计算出来。<br>不足：因为不支持顺序执行，不能处理IO等必须顺序执行的操作。解决方案-continuations，monads以及uniqueness typing。</p></blockquote><h3 id="链式风格-continuation"><a href="#链式风格-continuation" class="headerlink" title="链式风格(continuation)"></a>链式风格(continuation)</h3><blockquote><p>continuation又称CPS（Continuation Programming Style）就是一种特别的参数，把这种参数传到函数中，函数就能够根据continuation将返回值传递到程序中的某段代码中。</p></blockquote><p>如下示例：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int i = add(5, 10);</span><br><span class="line">int j = square(i);</span><br></pre></td></tr></table></figure><p>add这个函数将返回15然后这个值会赋给i，这也是add被调用的地方。接下来i的值又会被用于调用square。用Continuation Pass Style（CPS）技术重写如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int j = add(5, 10, square);</span><br></pre></td></tr></table></figure><p>add多了一个参数：一个函数，add必须在完成自己的计算后，调用这个函数并把结果传给它。这时square就是add的一个continuation。</p><blockquote><p>用CPS风格写出来的程序不需要栈，但是每次调用函数的时候都会要多加一个参数。<br>continuation和栈上指示函数返回地址的指针其实是同一样东西，只是continuation是显式的传递该地址并且因此代码就不局限于只能返回到函数被调用的地方了。  </p></blockquote><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><blockquote><p>模式匹配并不是什么新功能。而事实上它和函数式编程也没有什么太大的关系。<br>有点类似重载，几个同名函数会根据具体参数选择最佳的执行函数。</p></blockquote><p>普通Fibonacci函数：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int fib(int n) &#123;</span><br><span class="line">    if(n == 0) return 1;</span><br><span class="line">    if(n == 1) return 1;</span><br><span class="line"></span><br><span class="line">    return fib(n - 2) + fib(n - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用模式匹配重写过的Fibonacci函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int fib(0) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">int fib(1) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">int fib(int n) &#123;</span><br><span class="line">    return fib(n - 2) + fib(n - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当n为0时，可以用函数int fib(int n)，不过真正调用的是int fib(0)因为这个函数更具体更接近调用者的要求。</p><h3 id="闭包-Closure"><a href="#闭包-Closure" class="headerlink" title="闭包(Closure)"></a>闭包(Closure)</h3><blockquote><p>在指令式语言中变量不是final，可以读写外部的状态的情况下，又想使用FP的高阶函数等特性，需要通过lexical closure支持。<br>返回类型为函数的函数，closure保存了指向其外部变量的引用。如下示例：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Function makeIncrementer() &#123;</span><br><span class="line">   int n = 0;</span><br><span class="line"></span><br><span class="line">   int increment() &#123;</span><br><span class="line">       return ++n;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Function inc1 = makeIncrementer();</span><br><span class="line">Function inc2 = makeIncrementer();</span><br><span class="line"></span><br><span class="line">inc1(); // returns 1;</span><br><span class="line">inc1(); // returns 2;</span><br><span class="line">inc1(); // returns 3;</span><br><span class="line">inc2(); // returns 1;</span><br><span class="line">inc2(); // returns 2;</span><br><span class="line">inc2(); // returns 3;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="noopener">傻瓜函数编程(https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最早是从一些博客上看到过函数式编程，但是没有太在意。js支持将函数作为传出/传入参数，可以存储在变量中。java8中Lambda表达式 、Stream流处理等功能等闪亮登场，除此之外还支持函数接口。越来越多语言中引入函数式编程的特性，种种苗头都预示着函数式编程越来越得到重视。这里主要对函数式编程思想做一些理解和认识。&lt;br&gt;
    
    </summary>
    
      <category term="名词解释" scheme="https://dongz.me/categories/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>oracle递归查询</title>
    <link href="https://dongz.me/2018/12/18/oracle%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2/"/>
    <id>https://dongz.me/2018/12/18/oracle递归查询/</id>
    <published>2018-12-18T15:05:00.000Z</published>
    <updated>2018-12-18T16:03:25.248Z</updated>
    
    <content type="html"><![CDATA[<p>工作中遇到了递归查询部门树的需求，之前虽然用过，但隔的时间久了记不清具体用法。在这里mark一下，重新熟悉下<br><a id="more"></a></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span> dept_tree(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> ,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">parent</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">comment</span> <span class="keyword">on</span> <span class="keyword">column</span> dept_tree.id <span class="keyword">is</span> <span class="string">'主键'</span>;</span><br><span class="line"><span class="keyword">comment</span> <span class="keyword">on</span> <span class="keyword">column</span> dept_tree.name <span class="keyword">is</span> <span class="string">'部门名称'</span>;</span><br><span class="line"><span class="keyword">comment</span> <span class="keyword">on</span> <span class="keyword">column</span> dept_tree.parent <span class="keyword">is</span> <span class="string">'父部门主键'</span>;</span><br></pre></td></tr></table></figure><h2 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h2><p>执行 <code>desc dept_tree;</code>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">名称     空值       类型           </span><br><span class="line"><span class="comment">------ -------- ------------ </span></span><br><span class="line">ID     NOT NULL NUMBER(38)   </span><br><span class="line">NAME   NOT NULL VARCHAR2(20) </span><br><span class="line">PARENT NOT NULL NUMBER(38)</span><br></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">1</span> , <span class="string">'部门1'</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">2</span> , <span class="string">'部门2'</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">3</span> , <span class="string">'部门3'</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">4</span> , <span class="string">'部门1-1'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">5</span> , <span class="string">'部门1-2'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">6</span> , <span class="string">'部门1-3'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">7</span> , <span class="string">'部门2-1'</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">8</span> , <span class="string">'部门2-2'</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">9</span> , <span class="string">'部门3-1'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">10</span> , <span class="string">'部门3-2'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">11</span> , <span class="string">'部门3-3'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">12</span> , <span class="string">'部门3-4'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">13</span> , <span class="string">'部门3-5'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">14</span> , <span class="string">'部门3-6'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">15</span> , <span class="string">'部门3-6'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">16</span> , <span class="string">'部门2-2-1'</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_tree <span class="keyword">values</span>(<span class="number">17</span> , <span class="string">'部门2-2-2'</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><h2 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h2><h3 id="递归语法"><a href="#递归语法" class="headerlink" title="递归语法"></a>递归语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">column</span>, ...] <span class="keyword">from</span> tablename</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> [condition1]</span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> [condition2]</span><br><span class="line"><span class="keyword">where</span> [condition3];</span><br></pre></td></tr></table></figure><p><strong>condition1:</strong><br>根结点的限定语句，可以放宽限定条件，以取得多个根结点，实际就是多棵树；省略该条件或设置为1=1则是每个节点作为根节点遍历一遍。  </p><p><strong>condition2:</strong><br>连接条件，其中用PRIOR表示上一条记录。比如 CONNECT BY PRIOR id = parent，就是说上一条记录的id 是本条记录的parent，即本记录的父亲是上一条记录，递归方式为自顶向下顺序遍历；CONNECT BY id =  PRIOR parent，就是说上一条记录的parent是本条记录的id，即上一条记录的父亲是本记录，递归方式为自底向上顺序遍历。  </p><p><strong>condition3:</strong><br>是过滤条件，用于对返回的所有记录进行过滤。</p><h3 id="递归实例"><a href="#递归实例" class="headerlink" title="递归实例"></a>递归实例</h3><h4 id="根部门为17，向上遍历所有节点"><a href="#根部门为17，向上遍历所有节点" class="headerlink" title="根部门为17，向上遍历所有节点"></a>根部门为17，向上遍历所有节点</h4><blockquote><p>执行sql: </p></blockquote>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>,sys_connect_by_path(<span class="keyword">name</span>, <span class="string">'=&gt;'</span>) namejoins, <span class="keyword">level</span></span><br><span class="line"><span class="keyword">from</span> dept_tree</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> dept_tree.id=<span class="number">17</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span>  <span class="keyword">id</span> = <span class="keyword">prior</span> <span class="keyword">parent</span></span><br></pre></td></tr></table></figure><blockquote><p>执行结果:  </p></blockquote><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">NAME</th><th style="text-align:center">NAMEJOINS</th><th style="text-align:center">LEVEL</th></tr></thead><tbody><tr><td style="text-align:center">17</td><td style="text-align:center">部门2-2-2</td><td style="text-align:center">=&gt;部门2-2-2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">部门2-2</td><td style="text-align:center">=&gt;部门2-2-2=&gt;部门2-2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">部门2</td><td style="text-align:center">=&gt;部门2-2-2=&gt;部门2-2=&gt;部门2</td><td style="text-align:center">3</td></tr></tbody></table><h4 id="根部门为17，向下遍历所有节点"><a href="#根部门为17，向下遍历所有节点" class="headerlink" title="根部门为17，向下遍历所有节点"></a>根部门为17，向下遍历所有节点</h4><blockquote><p>执行sql:  </p></blockquote>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>,sys_connect_by_path(<span class="keyword">name</span>, <span class="string">'=&gt;'</span>) namejoins, <span class="keyword">level</span></span><br><span class="line"><span class="keyword">from</span> dept_tree</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> dept_tree.id=<span class="number">17</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span>  <span class="keyword">prior</span> <span class="keyword">id</span> = <span class="keyword">parent</span></span><br></pre></td></tr></table></figure><blockquote><p>执行结果:  </p></blockquote><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">NAME</th><th style="text-align:center">NAMEJOINS</th><th style="text-align:center">LEVEL</th></tr></thead><tbody><tr><td style="text-align:center">17</td><td style="text-align:center">部门2-2-2</td><td style="text-align:center">=&gt;部门2-2-2</td><td style="text-align:center">1</td></tr></tbody></table><h4 id="根部门不设置过滤条件，以所有节点作为根节点遍历"><a href="#根部门不设置过滤条件，以所有节点作为根节点遍历" class="headerlink" title="根部门不设置过滤条件，以所有节点作为根节点遍历"></a>根部门不设置过滤条件，以所有节点作为根节点遍历</h4><blockquote><p>执行sql:  </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>,sys_connect_by_path(<span class="keyword">name</span>, <span class="string">'=&gt;'</span>) namejoins, <span class="keyword">level</span></span><br><span class="line"><span class="keyword">from</span> dept_tree</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span>  <span class="keyword">prior</span> <span class="keyword">id</span> = <span class="keyword">parent</span></span><br></pre></td></tr></table></figure><blockquote><p>执行结果:</p></blockquote><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">NAME</th><th style="text-align:center">NAMEJOINS</th><th style="text-align:center">LEVEL</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">部门1</td><td style="text-align:center">=&gt;部门1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">部门1-1</td><td style="text-align:center">=&gt;部门1=&gt;部门1-1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">部门1-2</td><td style="text-align:center">=&gt;部门1=&gt;部门1-2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">部门1-3</td><td style="text-align:center">=&gt;部门1=&gt;部门1-3</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">部门2</td><td style="text-align:center">=&gt;部门2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">部门2-1</td><td style="text-align:center">=&gt;部门2=&gt;部门2-1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">部门2-2</td><td style="text-align:center">=&gt;部门2=&gt;部门2-2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">部门2-2-1</td><td style="text-align:center">=&gt;部门2=&gt;部门2-2=&gt;部门2-2-1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">部门2-2-2</td><td style="text-align:center">=&gt;部门2=&gt;部门2-2=&gt;部门2-2-2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">部门3</td><td style="text-align:center">=&gt;部门3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">部门3-1</td><td style="text-align:center">=&gt;部门3=&gt;部门3-1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">部门3-2</td><td style="text-align:center">=&gt;部门3=&gt;部门3-2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">部门3-3</td><td style="text-align:center">=&gt;部门3=&gt;部门3-3</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">部门3-4</td><td style="text-align:center">=&gt;部门3=&gt;部门3-4</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">部门3-5</td><td style="text-align:center">=&gt;部门3=&gt;部门3-5</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">部门3-6</td><td style="text-align:center">=&gt;部门3=&gt;部门3-6</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">部门3-6</td><td style="text-align:center">=&gt;部门3=&gt;部门3-6</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">部门1-1</td><td style="text-align:center">=&gt;部门1-1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">部门1-2</td><td style="text-align:center">=&gt;部门1-2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">部门1-3</td><td style="text-align:center">=&gt;部门1-3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">部门2-1</td><td style="text-align:center">=&gt;部门2-1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">部门2-2</td><td style="text-align:center">=&gt;部门2-2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">部门2-2-1</td><td style="text-align:center">=&gt;部门2-2=&gt;部门2-2-1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">部门2-2-2</td><td style="text-align:center">=&gt;部门2-2=&gt;部门2-2-2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">部门3-1</td><td style="text-align:center">=&gt;部门3-1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">部门3-2</td><td style="text-align:center">=&gt;部门3-2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">部门3-3</td><td style="text-align:center">=&gt;部门3-3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">部门3-4</td><td style="text-align:center">=&gt;部门3-4</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">部门3-5</td><td style="text-align:center">=&gt;部门3-5</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">部门3-6</td><td style="text-align:center">=&gt;部门3-6</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">部门3-6</td><td style="text-align:center">=&gt;部门3-6</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">部门2-2-1</td><td style="text-align:center">=&gt;部门2-2-1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">部门2-2-2</td><td style="text-align:center">=&gt;部门2-2-2</td><td style="text-align:center">1</td></tr></tbody></table><blockquote><p>这时自底向上执行如下sql输出结果同上:     </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>,sys_connect_by_path(<span class="keyword">name</span>, <span class="string">'=&gt;'</span>) namejoins, <span class="keyword">level</span></span><br><span class="line"><span class="keyword">from</span> dept_tree</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> <span class="keyword">id</span> = <span class="keyword">prior</span> <span class="keyword">parent</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中遇到了递归查询部门树的需求，之前虽然用过，但隔的时间久了记不清具体用法。在这里mark一下，重新熟悉下&lt;br&gt;
    
    </summary>
    
      <category term="积累" scheme="https://dongz.me/categories/%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="数据存储" scheme="https://dongz.me/categories/%E7%A7%AF%E7%B4%AF/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP常见状态码</title>
    <link href="https://dongz.me/2018/12/16/HTTP%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://dongz.me/2018/12/16/HTTP常见状态码/</id>
    <published>2018-12-16T15:12:00.000Z</published>
    <updated>2018-12-16T15:14:09.557Z</updated>
    
    <content type="html"><![CDATA[<p>当浏览器向服务器发送请求后，服务端会返回一个状态码用以表示服务器当响应状态，可以根据具体的返回码分析请求状态及问题出现的可能原因。<a id="more"></a></p><h2 id="1xx临时响应"><a href="#1xx临时响应" class="headerlink" title="1xx临时响应"></a>1xx临时响应</h2><blockquote><p>表示临时响应并需要请求者继续执行操作的状态码  </p></blockquote><ul><li>100 (继续) 服务器仅接收到部分请求，客户端应该继续发送其余的请求</li><li>101 (切换协议) 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</li></ul><h2 id="2xx成功"><a href="#2xx成功" class="headerlink" title="2xx成功"></a>2xx成功</h2><blockquote><p>表示成功处理了请求的状态码</p></blockquote><ul><li>200 (成功) 服务器已成功处理了请求。通常，这表示服务器提供了请求的网页</li><li>201 (已创建) 成功请求并创建了新的资源</li><li>202 (已接受) 请求已被服务器接受，但是处理未完成</li><li>203 (非授权信息) 非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</li><li>204 (无内容) 服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</li><li>205 (重置内容) 服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</li><li>206 (部分内容) 客户发送了一个带有Range头的GET请求，服务器完成了它</li></ul><h2 id="3xx重定向"><a href="#3xx重定向" class="headerlink" title="3xx重定向"></a>3xx重定向</h2><blockquote><p>表示要完成请求，需要进一步操作。 通常，这些状态码用来重定向</p></blockquote><ul><li>300 (多种选择) 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</li><li>301 (永久移动) 所请求的页面已经转移至新的URI，并将请求转到新URI</li><li>302 (临时移动) 与301类似。但资源只是临时被移动。客户端应继续使用原有URI</li><li>303 (查看其他地址) 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</li><li>304 (未修改) 所请求的资源未修改（一般是提供If-Modified-Since头表示客户只想比指定日期更新的资源），服务器返回此状态码时，不会返回任何资源</li><li>305 (使用代理) 客户请求的资源应该通过Location头所指明的代理服务器提取</li><li>307 (临时重定向) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li></ul><h2 id="4xx客户端错误"><a href="#4xx客户端错误" class="headerlink" title="4xx客户端错误"></a>4xx客户端错误</h2><blockquote><p>这些状态码表示请求可能出错，妨碍了服务器的处理。</p></blockquote><ul><li>400 (错误请求) 服务器未能理解请求</li><li>401 (未授权) 请求要求用户的身份认证</li><li>403 (禁止) 服务器端拒绝执行客户端请求</li><li>404 (未找到) 服务器找不到请求的网页</li><li>405 (方法禁用) 请求中指定的方法不被允许</li><li>406 (不接受) 服务器无法根据客户端请求的内容特性完成请求</li><li>407 (需要代理授权) 请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</li><li>408 (请求超时) 请求超出了服务器的等待时间</li><li>409 (冲突) 服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息</li><li>410 (已删除) 如果请求的资源已永久删除，服务器就会返回此响应</li><li>411 (需要有效长度) 服务器无法处理客户端发送的不带Content-Length的请求信息</li><li>412 (未满足前提条件) 请求中的前提条件被服务器判定为失败</li><li>413 (请求实体过大) 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</li><li>414 (请求的 URI 过长) 请求的URI过长（URI通常为网址），服务器无法处理</li><li>415 (不支持的媒体类型) 服务器无法处理请求附带的媒体格式</li><li>416 (请求范围不符合要求) 服务器不能满足客户在请求中指定的Range头</li><li>417 (未满足期望值) 服务器无法满足Expect的请求头信息</li></ul><h2 id="5xx服务器端错误"><a href="#5xx服务器端错误" class="headerlink" title="5xx服务器端错误"></a>5xx服务器端错误</h2><blockquote><p>表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p></blockquote><ul><li>500 (服务器内部错误) 服务器遇到错误，无法完成请求</li><li>501 (尚未实施) 服务器不具备完成请求的功能 例如，服务器无法识别请求方法时可能会返回此代码</li><li>502 (错误网关) 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</li><li>503 (服务不可用) 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</li><li>504 (网关超时) 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li><li>505 (HTTP 版本不受支持) 服务器不支持请求中所用的 HTTP 协议版本</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当浏览器向服务器发送请求后，服务端会返回一个状态码用以表示服务器当响应状态，可以根据具体的返回码分析请求状态及问题出现的可能原因。
    
    </summary>
    
      <category term="网络" scheme="https://dongz.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[music]-[ツナ覚醒]</title>
    <link href="https://dongz.me/2018/12/13/music-%E3%83%84%E3%83%8A%E8%A6%9A%E9%86%92/"/>
    <id>https://dongz.me/2018/12/13/music-ツナ覚醒/</id>
    <published>2018-12-12T16:28:00.000Z</published>
    <updated>2018-12-12T16:35:21.363Z</updated>
    
    <content type="html"><![CDATA[<p>一步超然动画片《家庭教师》中的插曲，特别喜欢这种燃炸天的节奏♡♡♡♡♡<br><a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29023858&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一步超然动画片《家庭教师》中的插曲，特别喜欢这种燃炸天的节奏♡♡♡♡♡&lt;br&gt;
    
    </summary>
    
      <category term="音乐" scheme="https://dongz.me/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
  </entry>
  
  <entry>
    <title>风暴之集合</title>
    <link href="https://dongz.me/2018/12/12/%E9%A3%8E%E6%9A%B4%E4%B9%8B%E9%9B%86%E5%90%88/"/>
    <id>https://dongz.me/2018/12/12/风暴之集合/</id>
    <published>2018-12-11T16:51:00.000Z</published>
    <updated>2018-12-11T16:57:41.497Z</updated>
    
    <content type="html"><![CDATA[<p>java中容器，也称集合可以容纳其它类型数据。在平时也接触类不少比如ArrayList、HashSet、LinkedList、HashMap、TreeMap等等，但真要细说还真一知半解，大体风暴类一下，有不当的地方欢迎评论中指出～～<br><a id="more"></a>  </p><h1 id="风暴之集合"><a href="#风暴之集合" class="headerlink" title="风暴之集合"></a>风暴之集合</h1><p><img src="https://coding.net/u/alvin_me/p/blogpics/git/raw/master/rongqiorjihe.jpg" alt=""></p><p><a href="http://www.edrawsoft.cn/viewer/public/s/ec6e5017846566" target="_blank" rel="noopener">看大图</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java中容器，也称集合可以容纳其它类型数据。在平时也接触类不少比如ArrayList、HashSet、LinkedList、HashMap、TreeMap等等，但真要细说还真一知半解，大体风暴类一下，有不当的地方欢迎评论中指出～～&lt;br&gt;
    
    </summary>
    
      <category term="集合" scheme="https://dongz.me/categories/%E9%9B%86%E5%90%88/"/>
    
    
      <category term="集合" scheme="https://dongz.me/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>风暴之mysql</title>
    <link href="https://dongz.me/2018/12/11/%E9%A3%8E%E6%9A%B4%E4%B9%8Bmysql/"/>
    <id>https://dongz.me/2018/12/11/风暴之mysql/</id>
    <published>2018-12-10T16:40:00.000Z</published>
    <updated>2018-12-10T17:01:35.394Z</updated>
    
    <content type="html"><![CDATA[<p>本篇以mysql常见维度展开头脑风暴。维度包括数据的存储结构、数据库事务、mysql中常见的锁、mysql使用优化、mysql中常见日志。图中有不当的地方请留言指出～～<br><a id="more"></a>  </p><h1 id="风暴之mysql"><a href="#风暴之mysql" class="headerlink" title="风暴之mysql"></a>风暴之mysql</h1><p><img src="https://coding.net/u/alvin_me/p/blogpics/git/raw/master/mysql.jpg" alt=""></p><p><a href="http://www.edrawsoft.cn/viewer/public/s/b8368745248662" target="_blank" rel="noopener">看大图</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇以mysql常见维度展开头脑风暴。维度包括数据的存储结构、数据库事务、mysql中常见的锁、mysql使用优化、mysql中常见日志。图中有不当的地方请留言指出～～&lt;br&gt;
    
    </summary>
    
      <category term="数据存储" scheme="https://dongz.me/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="mysql" scheme="https://dongz.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>风暴之线上问题排查</title>
    <link href="https://dongz.me/2018/11/29/%E9%A3%8E%E6%9A%B4%E4%B9%8B%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://dongz.me/2018/11/29/风暴之线上问题排查/</id>
    <published>2018-11-28T16:23:00.000Z</published>
    <updated>2018-12-10T17:02:37.966Z</updated>
    
    <content type="html"><![CDATA[<p>实际生产环境下，应用不可避免的会遇到各种各样的问题，要熟练掌握一些命令和工具，以快速排查定位线上问题。<br><a id="more"></a>  </p><h1 id="风暴之线上问题排查"><a href="#风暴之线上问题排查" class="headerlink" title="风暴之线上问题排查"></a>风暴之线上问题排查</h1><p><img src="https://coding.net/u/alvin_me/p/blogpics/git/raw/master/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.png" alt=""></p><p><a href="http://www.edrawsoft.cn/viewer/public/s/72167602893328" target="_blank" rel="noopener">看大图</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际生产环境下，应用不可避免的会遇到各种各样的问题，要熟练掌握一些命令和工具，以快速排查定位线上问题。&lt;br&gt;
    
    </summary>
    
      <category term="积累" scheme="https://dongz.me/categories/%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="问题排查" scheme="https://dongz.me/tags/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>风暴之并发和多线程</title>
    <link href="https://dongz.me/2018/11/29/%E9%A3%8E%E6%9A%B4%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://dongz.me/2018/11/29/风暴之并发和多线程/</id>
    <published>2018-11-28T16:18:00.000Z</published>
    <updated>2018-12-10T17:03:00.135Z</updated>
    
    <content type="html"><![CDATA[<p>并发和多线程是Java编程中避不开的话题，今天主要对并发和多线程相关知识进行下头脑风暴。<br><a id="more"></a></p><h1 id="风暴之并发和多线程"><a href="#风暴之并发和多线程" class="headerlink" title="风暴之并发和多线程"></a>风暴之并发和多线程</h1><p><img src="https://coding.net/u/alvin_me/p/blogpics/git/raw/master/%E5%B9%B6%E5%8F%91%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" alt=""></p><p><a href="http://www.edrawsoft.cn/viewer/public/s/7e9bd056155369" target="_blank" rel="noopener">看大图</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并发和多线程是Java编程中避不开的话题，今天主要对并发和多线程相关知识进行下头脑风暴。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://dongz.me/categories/java/"/>
    
    
      <category term="并发" scheme="https://dongz.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="多线程" scheme="https://dongz.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
